{"pageProps":{"entries":{"items":[{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"7Jf8nQ7ZghxHUvdQm8jl7k","type":"Entry","createdAt":"2020-05-27T09:06:54.039Z","updatedAt":"2020-06-13T04:01:18.576Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Webサービスの中で自分のサービスをうまく使う、センスいいドッグフーディングの話","slug":"2017/12/05/101957","excerpt":"![f:id:o_tomomichi:20171205101931p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205101931.png \"f:id:o_tomomichi:20171205101931p:plain\")\n\n自分が作ったものを自分で使うことを、ドッグフーディングといいます。\n\n個人でWebサービス開発している人は、だいたい自分がほしいものを作るので基本ドッグフーディングしてるはず。\n\nこれを一歩すすめて、ただ個人的に使うだけじゃなくて、自分のサービス内のコンテンツとして自分のサービスを使うという再帰構造にできると、がぜんイケてる感じが出てきます（自社調べ）。\n\nもちろん全部のサービスでできるわけじゃないけど、チャンスがあれば狙ってみるといいでしょう。\n\nここではこの究極のドッグフーディングをうまくやってる例を紹介してみます。","content":"![f:id:o_tomomichi:20171205101931p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205101931.png \"f:id:o_tomomichi:20171205101931p:plain\")\n\n自分が作ったものを自分で使うことを、ドッグフーディングといいます。\n\n個人でWebサービス開発している人は、だいたい自分がほしいものを作るので基本ドッグフーディングしてるはず。\n\nこれを一歩すすめて、ただ個人的に使うだけじゃなくて、自分のサービス内のコンテンツとして自分のサービスを使うという再帰構造にできると、がぜんイケてる感じが出てきます（自社調べ）。\n\nもちろん全部のサービスでできるわけじゃないけど、チャンスがあれば狙ってみるといいでしょう。\n\nここではこの究極のドッグフーディングをうまくやってる例を紹介してみます。### チュートリアル\n\n![f:id:o_tomomichi:20171205133644p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205133644.png \"f:id:o_tomomichi:20171205133644p:plain\")\n\nサイト内にわかりやすいステップ形式のチュートリアルを追加できるjsライブラリ。\n\nこのライブラリの使い方をIntro.jsを使ってチュートリアルしてくれてます。いいですね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fintrojs.com%2F\" title=\"Intro.js - Step-by-step guide and feature introduction for your website\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://introjs.com/\">introjs.com</a></cite>\n\n### チャットサポート\n\n![f:id:o_tomomichi:20171205133659p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205133659.png \"f:id:o_tomomichi:20171205133659p:plain\")\n\njsコードを1行貼るだけで、サイトにチャットサポートを追加できて、なおかつそのチャットは全部slackの指定したチャネルでやり取りできるという便利サービス。\n\nここもサービスサイトに自分のチャットサポートを入れてます。\n\nこの手のサービスはやりやすいし（むしろやらない理由がない）、zendeskとか基本みんなやってる感じですね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsmall.chat%2F\" title=\"Smallchat\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://small.chat/\">small.chat</a></cite>\n\n### よくある質問\n\n![f:id:o_tomomichi:20171205133725p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205133725.png \"f:id:o_tomomichi:20171205133725p:plain\")\n\nよくある質問を作成できるTayoriのよくある質問ページ。\n\nもちろん自社サービスで作られています。\n\nシンプルなデザインでほしい機能がひととおり揃うので、次使ってみようかなと思っています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftayori.com%2Ffaq%2Ff6c10584faec1b5db7771bd48fd541576c3fac68\" title=\"Tayori\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://tayori.com/faq/f6c10584faec1b5db7771bd48fd541576c3fac68\">tayori.com</a></cite>\n\n### ドキュメント\n\n![f:id:o_tomomichi:20171205133840p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205133840.png \"f:id:o_tomomichi:20171205133840p:plain\")\n\nチームでいい感じにドキュメントを作成・共有できるesa.io。\n\nここのドキュメントはもちろんesaで作られています。\n\n「We love dogfooding」と謳うくらい、確信犯です。\n\nデザインが抜群におしゃれ。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.esa.io%2F\" title=\"docs.esa.io\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://docs.esa.io/\">docs.esa.io</a></cite>\n\n### お知らせ（年表）\n\n![f:id:o_tomomichi:20171205133905p:plain](https://storage.googleapis.com/blog-notsobad/images/20171205133905.png \"f:id:o_tomomichi:20171205133905p:plain\")\n\n年表作成の競合サービス（？）「Nenpyo」さんは、サイトのお知らせを公式アカウントの年表という形で掲載されてます。\n\nこのセンス超うらやましい。\n\nうちの[THE TIMELINE](https://the-timeline.jp/)もこれやろっかなー。。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fnenpyo.org%2Finfo\" title=\"info (info) - NENPYO\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://nenpyo.org/info\">nenpyo.org</a></cite>\n\n### 画面キャプチャ\n\n![f:id:o_tomomichi:20171230172634p:plain](https://storage.googleapis.com/blog-notsobad/images/20171230172634.png \"f:id:o_tomomichi:20171230172634p:plain\")\n\n画面のDOM要素をcanvasに書き出して画像化することを可能にする超便利ライブラリ「html2canvas」。\n\nいつの間にか正式リリースされたのか、公式サイトがおしゃれに整備されていました。\n\nここはサイト右下にカメラアイコンがあって、いつでも画面キャプチャをテストすることが可能です。\n\n[html2canvas - Screenshots with JavaScript](http://html2canvas.hertzen.com/)\n\n* * *\n\n当たり前の結論になってしまいましたが、やっぱりツール系のサービスが相性よくてやりやすそうですね。\n\nツール系サービスを作ってる立場としては、うまく使っていきたいところです。\n\nあと年表みたいに、本来の使い方じゃないのにうまく使ってる例はセンスいいなーって思います。\n\nとりあえず思いついたところはこんなもんですが、他にも色々あると思うので、見つけた人はぜひ教えてくださーい。\n\nおしまい。","date":1512436797000,"image":"https://storage.googleapis.com/blog-notsobad/images/20171205101931.png","tag":["個人開発論","雑記"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"46z822fnzHVIfwiq0vjj1E","type":"Entry","createdAt":"2020-05-27T09:06:55.352Z","updatedAt":"2020-06-13T04:01:22.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"日本語で国名を選択できて、値はISOの国コードになってるいい感じのセレクトボックスを5分でお手軽に用意する","slug":"2017/12/04/151158","excerpt":"国を選択させたいこと、ありますよね。\n\nセレクトボックスでは国名を表示させたいけど、値はISOの2桁国コードで保存したいってやつ。\n\nもちろん国名は日本語で。\n\nそんな状況がまた来たので、お手軽に5分で作れる方法を考えてみました。よければご活用ください。","content":"国を選択させたいこと、ありますよね。\n\nセレクトボックスでは国名を表示させたいけど、値はISOの2桁国コードで保存したいってやつ。\n\nもちろん国名は日本語で。\n\nそんな状況がまた来たので、お手軽に5分で作れる方法を考えてみました。よければご活用ください。経緯と方針\n-----\n\nこれ昔やってたときはRailsでgem入れたりしてたのです。\n\nしかし今回はRailsを離れて素のhtml/jsで書いてたので、どうしたもんかなーと思いまして。\n\n普通にライブラリとか探してたのですが、なかなかよさそうなのがない。\n\nで探しているとこんな記事を見つけました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fmiz2403.com%2Fcountries-list%2F\" title=\"問い合わせページなどで国名をドロップダウンで選択する為のselectタグリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://miz2403.com/countries-list/\">miz2403.com</a></cite>\n\nselectとoptionに国がずらっと入ってるやつが、テキストでコピペできるように用意されてます。\n\nなるほど、よく考えればこれで十分じゃないかと。\n\n国名なんてそうそうアップデートされるものでもないので、メンテナンス性はそんなに考慮しなくていいし。\n\n逆にライブラリとか使わない方がメンテナンスフリーで運用にはよさそうかもしれない。\n\nというわけで、ライブラリに頼らず生のHTML出力する方向ですすめてみます。\n\nさっきのリンクだと英語版しかないので、これの日本語版を用意するのがゴールです。\n\nやりかた\n----\n\nとにかく一回リストを作ってしまえばいいだけなので、いかに省力でいけるかがカギです。\n\n### Wikiの一覧ページをコピってスプレッドシードに貼り付ける\n\nまずは日本語の国名とISOコードが一覧になった元データを探します。\n\nWikipediaにいい感じのページがありました。\n\n[ISO 3166-1 - Wikipedia](https://ja.wikipedia.org/wiki/ISO_3166-1)\n\nこのテーブルの部分をまるっと選択してコピーして、スプレッドシートに貼り付けます。\n\nもちろんお好みでエクセルを使ってもかまいません。\n\n### CONCATENATE関数でoptionタグを生成\n\n次にこのデータから大量のoptionタグを生成します。\n\nやることはめちゃシンプルで、スプレッドシードのconcatenate（文字列結合）関数を使って、いい感じにタグを作るだけです。\n\nこんな感じ。\n\n![f:id:o_tomomichi:20171204144804p:plain](https://storage.googleapis.com/blog-notsobad/images/20171204144804.png \"f:id:o_tomomichi:20171204144804p:plain\")\n\nメインの部分は、\n\n`=CONCATENATE(\"<option value='\",LOWER(E3),\"'>\",A3,\"</option>\")`\n\nで、E列がISO2桁のコード、A列が日本語の国名ですね。\n\n今回はISOを小文字で使いたかったのでLOWER関数をかませてます。\n\nこの時点でもうほぼほぼできています。\n\n最後の仕上げとして、元のWikipediaのテーブルに値が入っていない見出し行があるため、これを除外するようにIF文を追加します。\n\n`=if(E3<>\"\", CONCATENATE(\"<option value='\",LOWER(E3),\"'>\",A3,\"</option>\"), \"\")`\n\nこれでいい感じにoptionタグが生成されました。\n\nあとはふつうにこれをコピペするだけで使えます。\n\n超お手軽！\n\n* * *\n\n英語名の列もあるので、英語版への切替も簡単にできそうです。\n\nおしまい。","date":1512367918000,"tag":["技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"29UZTB4fxcyxE8BgkqESYB","type":"Entry","createdAt":"2020-05-27T09:06:56.064Z","updatedAt":"2020-06-13T04:01:26.348Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"クラウド型IDE「Codeanywhere」×「Firebase」で、PC不要のクラウドプログラミング環境を構築する","slug":"2017/10/31/121052","excerpt":"![f:id:o_tomomichi:20171031110614p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031110614.png \"f:id:o_tomomichi:20171031110614p:plain\")\n\n普段はMacBookとAtomでコードを書いています。\n\nしかし時々夢を見るわけです。これをタブレットとか、何ならスマホでできないのだろうかと。\n\nというわけでそんな環境を実現するべく、クラウドIDEの[Codeanywhere](https://codeanywhere.com/)でFirebaseプロジェクトを動かしてみるのをやってみたメモ。","content":"![f:id:o_tomomichi:20171031110614p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031110614.png \"f:id:o_tomomichi:20171031110614p:plain\")\n\n普段はMacBookとAtomでコードを書いています。\n\nしかし時々夢を見るわけです。これをタブレットとか、何ならスマホでできないのだろうかと。\n\nというわけでそんな環境を実現するべく、クラウドIDEの[Codeanywhere](https://codeanywhere.com/)でFirebaseプロジェクトを動かしてみるのをやってみたメモ。なんでCodeanywhereなのか\n------------------\n\nPCローカルのアプリでなく、クラウド型のIDEというのがけっこう前から存在しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.hitorifest.com%2Ftechnology%2Fonline-ide%2F%23Cloud9_8211_Your_development_environment_in_the_cloud\" title=\"プログラミングエディタもクラウドの時代へ、クラウド型IDE 3選\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.hitorifest.com/technology/online-ide/#Cloud9_8211_Your_development_environment_in_the_cloud\">blog.hitorifest.com</a></cite>\n\nただやはりローカルアプリに比べて動作が遅かったりするため、なかなか使ってる人を見たことはありません。\n\nそれは承知したうえで、あえていま試してみようという心意気。\n\nちなみにこの分野の一番人気は、Amazonに買収されて将来性も明るそうなCloud9。\n\nですが今回は全体的なサービスのデザインが好みだったCodeanywhereを選びました。一応こちらも大手。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcodeanywhere.com%2F\" title=\"Codeanywhere\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://codeanywhere.com/\">codeanywhere.com</a></cite>\n\nなんでFirebaseなのか\n--------------\n\nなんで今回Firebaseかというと、いまFirebaseがアツいからです（当社調べ）。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.google.com%2F%3Fhl%3Dja\" title=\"Firebase\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase.google.com/?hl=ja\">firebase.google.com</a></cite>\n\n弱点だったRealtimeDatabaseの制約も、CloudFirestoreが出たことでかなり改善されました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FYatima%2Fitems%2F54ea22d0cea1acc6cbcb\" title=\"Firebase RTDB + GCP datastore = Firestoreについて第一印象 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/Yatima/items/54ea22d0cea1acc6cbcb\">qiita.com</a></cite>\n\nというわけでFirebaseまじアツいです。アプリじゃなくてWebの人ももっとFirebase使いましょう。\n\nCodeanywhereでFirebaseをローカル起動する\n------------------------------\n\nここからようやく本題。CodeanywhereでFirebaseのプロジェクトを動かすまでの手順です。\n\nサインアップとかはもう終わってる前提で。\n\n### Codeanywhereにプロジェクトをインポート\n\nプロジェクトをインポートするには、Connectionというものを新しくつくります。\n\nインポート先は色々選べるけど、まぁすでにGithubで管理してればそこから持ってくるのが一番楽でしょう。\n\nしばらく待てばエディタ上にプロジェクトのファイルが反映されます。\n\n### コンソールで動かしてみる\n\nCodeanywhereではふつうにコンソール画面が使えます。\n\n最初やり方が見つからなかったけど、Connectionsメニューに追加されたプロジェクト名で右クリックして、「SSH Terminal」を選択すればOK。\n\nコンソールが立ち上がったらさっそくfirebaseコマンドを打ってみますが、これはもちろんエラー。\n\nまずfirebase-toolsをインストールする必要があります。\n\n### nodeをバージョンアップ\n\nこの記事の執筆時点で、Codeanywhereのnodeバージョンは4.4.0。\n\nこのままfirebase-toolsをインストールしても動きませんでした。\n\nのでまずはnodeをバージョンアップ。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fstrsk%2Fitems%2F925644e124efcc964625\" title=\"node.jsのバージョンアップ、バージョン切り替え - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/strsk/items/925644e124efcc964625\">qiita.com</a></cite>\n\n    $ nvm ls-remote\n    \n\nでインストールできるバージョンを確認して、この時点で最新の8.8.1をインストールしました。\n\n    $ nvm install 8.8.1\n    \n\nこのままだと次回起動時にまた4.4.0に戻ってるので、デフォルトを8.8.1に設定します。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2F544%2Fitems%2F7237a32c68619236f446\" title=\"nvmでnode.jsの環境をつくる。 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/544/items/7237a32c68619236f446\">qiita.com</a></cite>\n\n    $ nvm alias default 8.8.1\n    \n\n### firebase-toolsインストール\n\nこれで改めてfirebase-toolsのインストールに挑戦。\n\n    $ npm install -g firebase-tools\n    \n\nで入ったらログイン。ローカルじゃないのでオプションを付けます。\n\n    $ firebase login --no-localhost\n    \n\n### ローカルサーバ起動\n\nそれではFirebaseをローカル（Codeanywhere上なので、ローカルじゃないけど）で起動します。\n\n    $ firebase serve --project XXXXX\n    \n\n無事起動しました。しかしこの状態で「Run Project」をクリックしても、プロジェクトのディレクトリが見れるだけです。\n\n![f:id:o_tomomichi:20171031113622p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031113622.png \"f:id:o_tomomichi:20171031113622p:plain\")\n\n### ポート指定してアクセス\n\nこれはデフォルトで80番ポートを見に行ってるみたいなのですが、Firebaseはデフォルトで5000番ポートを使ってます。\n\nどうしようかと思っていると、ポートを指定してアプリケーションを見ることができるようでした。\n\n![f:id:o_tomomichi:20171031113940j:plain](https://storage.googleapis.com/blog-notsobad/images/20171031113940.jpg \"f:id:o_tomomichi:20171031113940j:plain\")\n\nターミナルを開いたときと同じメニューから、「info」を選択します。\n\ninfoタブが開いたら、一番下にポートを指定してアクセスするためのURLが表示されています。\n\n    http://port-XX.PROJECT-NAME-USERNAMEcodeanywhereXXXXXX.codeanyapp.com\n    \n\nこんなやつ。`port-XX`の部分に好きなポート番号を入れてアクセスすればOKです。\n\n### hostも指定する\n\nそして再挑戦。しかし、今度なこんな画面になりました。\n\n![f:id:o_tomomichi:20171031114437p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031114437.png \"f:id:o_tomomichi:20171031114437p:plain\")\n\nfirebaseをlocalhostで動かしていたので、コンテナの外から見れないようです。\n\nというわけでfirebaseの起動オプションを変更。\n\n    firebase serve --project PROJECT-NAME --host 0.0.0.0\n    \n\n最後にhostオプションをつけて、0.0.0.0で動かします。\n\nこれで再度さっきのURLにアクセスしてみると…\n\n見れた！ついにFirebaseをCodeanywhereローカル(？)上で動かせました！\n\nまとめ\n---\n\nこれで夢のクラウドプログラミングやーと満足したのですが、よく考えたらタブレットなんて持っていないことに気づきました。\n\nあとCodeanywhereのiPhoneアプリもあるので入れてみましたが、なかなかバグが多くて実用は怖い感じでした。 （そもそもターミナル機能もなさそう）\n\nというわけで、やっぱりプログラミングはMacBookでやることになりそうです。\n\nよく考えたら本当の不満はAtomが遅いことだったので、いまさらながらSublimeTextデビューしてみようと思います。\n\nおしまい。","date":1509419452000,"image":"https://storage.googleapis.com/blog-notsobad/images/20171031110614.png","tag":["技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"2FhPMqO0qJPsBGMLkqzVuf","type":"Entry","createdAt":"2020-05-27T09:06:57.080Z","updatedAt":"2020-06-13T04:01:30.099Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"かっぴー「左ききのエレン」を年表で整理してみた","slug":"2017/10/09/074509","excerpt":"![f:id:o_tomomichi:20171008125248j:plain](https://storage.googleapis.com/blog-notsobad/images/20171008125248.jpg \"f:id:o_tomomichi:20171008125248j:plain\")\n\nかっぴーさんが連載していた「左ききのエレン」がついに完結しました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcakes.mu%2Fseries%2F3659\" title=\"左ききのエレン\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cakes.mu/series/3659\">cakes.mu</a></cite>\n\n久しぶりに何か揺さぶられるようなマンガだったので、余韻に浸りながらついつい夢中で年表作成してしまいましたというお話し。","content":"![f:id:o_tomomichi:20171008125248j:plain](https://storage.googleapis.com/blog-notsobad/images/20171008125248.jpg \"f:id:o_tomomichi:20171008125248j:plain\")\n\nかっぴーさんが連載していた「左ききのエレン」がついに完結しました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcakes.mu%2Fseries%2F3659\" title=\"左ききのエレン\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cakes.mu/series/3659\">cakes.mu</a></cite>\n\n久しぶりに何か揺さぶられるようなマンガだったので、余韻に浸りながらついつい夢中で年表作成してしまいましたというお話し。左ききのエレンはとにかくエモい\n---------------\n\n広告代理店で働く光一とアーティストのエレン。\n\nこの二人を中心に、広告業界やアート業界の登場人物が繰り広げる群像劇なんですが、このマンガはとにかくアツい。\n\nいや、落合先生風に言うととにかくエモい。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcakes.mu%2Fposts%2F15416\" title=\"研究室の学生に、「お前は、“オレ”のことでずいぶんと忙しそうだな」と言ってから読ませたい | ｢21世紀の変人たち｣とする｢真面目｣な話 | QREATOR AGENT | cakes（ケイクス）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cakes.mu/posts/15416\">cakes.mu</a></cite>\n\nもしまだ未読の人は、とりあえず読んでみることをオススメします。\n\n（年表でネタバレしちゃうので、興味ある人はまず作品を読んでから年表見て下さい）\n\n「天才になれなかったすべての人へーー。 」というのが作品全体に通底するキャッチコピーですが、社会人やってるとこれは刺さりますよね。。\n\nしかし時系列がむずかしいので\n--------------\n\nで連載中からずっと読んでいて、今回完結したあとに改めて最初から通読もしたのですが、このマンガは時系列がけっこう複雑です。\n\n光一とエレンの高校時代の出会いから、広告代理店時代でもいくつか時制があり、さらに未来時制の話まであったりして、それが入り組んでるのでふつうに読んでるといまどこの話だっけ？となりがちなのですね。\n\n> [#左ききのエレン](https://twitter.com/hashtag/%E5%B7%A6%E3%81%8D%E3%81%8D%E3%81%AE%E3%82%A8%E3%83%AC%E3%83%B3?src=hash&ref_src=twsrc%5Etfw) WEB連載なのもあって、途中から読んでも楽しい様に各話の時系列をめちゃくちゃにしたんだけど、後半になるにつれ伏線が混み合ってきて、今となっては初見殺しになっている。止むを得ない。\n> \n> — かっぴー/左ききのエレン (@nora\\_ito) [2017年6月15日](https://twitter.com/nora_ito/status/875203692537847808?ref_src=twsrc%5Etfw)\n\n初見殺し。\n\nというわけで\n------\n\n例によって作品内の出来事を年表で整理してみました。\n\n「左ききのエレン」一気読みのおともにぜひどうぞ。\n\n<iframe width=\"100%\" height=\"700px\" seamless=\"\" frameborder=\"0\" src=\"https://app.the-timeline.jp/?key=1PSEBmMVfu_y1fqZ8KcKrTZllBvFhDaOIZm35i7HNqas&amp;start=19990105072207&amp;end=20141216124467\"></iframe>\n\n### 注意\n\n*   ネタバレするので、未読の人はまず作品を読んでから！\n    \n*   全画面で表示したい場合はこちら  \n    [https://app.the-timeline.jp/?key=1PSEBmMVfu\\_y1fqZ8KcKrTZllBvFhDaOIZm35i7HNqas&start=19990105072207&end=20141216124467](https://app.the-timeline.jp/?key=1PSEBmMVfu_y1fqZ8KcKrTZllBvFhDaOIZm35i7HNqas&start=19990105072207&end=20141216124467)\n    \n*   スマホだとどうしても限界があるので、できればPCの大画面で見ることをオススメします。\n    \n\n### 色分けのルール\n\n*   一番最初に光一とエレンそれぞれの時代区分を作っています。\n    \n*   上から順に、第1話から作品内の出来事を並べています\n    \n*   各出来事は、それが含まれる時代区分に合わせた色となっています。たとえば第1話は光一の神谷チーム時代の話なので、紫とか。\n    \n*   高校大学は、光一エレンどちらの話でも、同じ時代区分として扱っています。\n    \n*   大学卒業以降は、同じ年代の出来事でも、エレン側の話をしてるときはNY編の色、光一の話のときはその時々の色で分けています。\n    \n*   回想シーンなど、時代区分に合致しないものは色なし扱いです。\n    \n\nキーイベント\n------\n\n「左ききのエレン」では、同じ出来事を複数の章で描写することが時々あります。\n\n往々にしてそれは物語内でもキーとなるイベントだったりするわけですが、せっかくなのでそうしたキーイベントもちょっと整理してみたいと思います。\n\n#### 光一がプロジェクトから外されて、飲み会を抜けて横浜に帰る\n\n第1話でいきなり出てくるこのシーン。後にかなり後半の第44話で、このシーンが神谷視点から改めて描写されることになります。\n\n後から時系列を追いかけると、プレゼンが年明けすぐと言われているので、これが2008年1月のことだとわかります。\n\nこの1話の作り方は、話の構成が本当にうまいなーと思いますね。\n\n第1話は導入部なので、各キャラの顔見せをしつつ、光一がいる広告業界の雰囲気を伝えるのが一番の目的。\n\nそういう意味で、徹夜の準備からプレゼンに勝って、でも担当からは外され、傷心の光一が思い出の場所でエレンのことを思い出す…という一連の流れは、テンポよく広告業界の雰囲気も出しつつうまく回想シーンにつなげていて、すごいなーと感動しました。\n\nでも本当にすごいのは、このS社案件がただ導入のためだけに使われてるんじゃなくて、後に神谷の独立や体制変更の引き金にもなる超重要案件になってるというところだと思います。\n\n構成に無駄がないというか、緻密に計算されてるなーという印象を強く受けますね。\n\n#### エレンがNYでインタビューされてるシーン\n\n続いてはこちら。\n\nこれも何度か出てくるシーンですが、初出は第12話で、記者の質問からエレンの回想につなげるシーンとして出てきます。\n\n後に35話の次の番外編で再度描写され、これがエレンが初めてメディアの前に姿を現したインタビューだったことがわかります。\n\nまた横にいた女性がさゆりだと明らかになるのもこのときですね。\n\nこの日、エレンは公の場に姿を現し、後にルーシーからはこのときにさゆりとルーシーの役割は終わっていたと言われます。\n\nこれが2008年1月の出来事で、ルーシー回想でエレンはこの年、手紙を待つように日本の雑誌をよく読んでいたと言われています。\n\n自分はアーティストとして世に出た、光一お前はどうだ、というエレンからの挑戦状ですね。\n\n#### ヤングアートディレクターシンポジウムで、光一が神谷にケンカ売る\n\n最後はこれ行きましょう。\n\n独立した神谷さんが1年半ぶりに日本に帰ってきて、シンポジウムで柳Jrとなった光一と再会するシーン。\n\nシンポジウムのシーンは初出が前半の18話ですが、このあと長く回想が続くので、次に出てくるのは終盤の51話です。\n\nこれが2010年11月の出来事なので、ここからクライマックスの皆既月食=12/21まではもう1ヶ月ちょっとしかないのですね。\n\nここで注目したいのは神谷が光一のこと心配しつつも、ケンカ売られてうれしいという感情を抱いてるところ。\n\n光一が就活してるとき、四次面接で神谷にどんな人と働きたいか聞いた時、「ケンカできる人」って答えてるんですよね。\n\nそれから神谷チームに入るも、神谷の顔色ばっかり伺ってるとか言われちゃってます。\n\nその後神谷が独立して光一は柳チームで苦労したりするわけですが、一年半経ってようやく、形はいびつながら光一も神谷にケンカ売れるところところまで来たと。\n\n神谷的にもそうですが、読者的にもここは胸熱ですよね。\n\nまとめ\n---\n\nというわけで「左ききのエレン」の年表でした。\n\n年表を作るために何度も作品を読み返したのですが、読むほどに細部のこだわりとか見えてきて、ほんとにいい作品だなーと思いました。\n\n個人的にお気に入りのシーンもたくさんありますが、小ネタという意味ではこれほんと好き。\n\n![f:id:o_tomomichi:20171009073509p:plain](https://storage.googleapis.com/blog-notsobad/images/20171009073509.png \"f:id:o_tomomichi:20171009073509p:plain\")\n\n会話のテンポがいいですね。\n\nジャンプPLUSで作画付きリメイク版の連載も始まるようなので、こちらも注目です。\n\n[http://natalie.mu/comic/news/251856](http://natalie.mu/comic/news/251856)\n\nおしまい。","date":1507502709000,"image":"https://storage.googleapis.com/blog-notsobad/images/20171008125248.jpg","tag":["年表","左ききのエレン"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"6tScZzlMp0h8pqCMd3ywun","type":"Entry","createdAt":"2020-05-27T09:06:59.545Z","updatedAt":"2020-06-13T04:01:32.820Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"個人開発のWebサービスで、Trelloを使っていい感じに開発ロードマップを公開した話","slug":"2017/09/29/104504","excerpt":"![f:id:o_tomomichi:20170917204443p:plain](https://storage.googleapis.com/blog-notsobad/images/20170917204443.png \"f:id:o_tomomichi:20170917204443p:plain\")\n\n個人で開発しているトーナメント表作成サービス「[THE TOURNAMENT](https://the-tournament.jp/about)」で、今後の開発予定などを載せた開発ロードマップをTrelloで公開しました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftrello.com%2Fb%2FG9vXQ1rT%2Fthe-tournament%25E9%2596%258B%25E7%2599%25BA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597\" title=\"Trello\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://trello.com/b/G9vXQ1rT/the-tournament%E9%96%8B%E7%99%BA%E3%83%AD%E3%83%BC%E3%83%89%E3%83%9E%E3%83%83%E3%83%97\">trello.com</a></cite>\n\n前から開発ロードマップは作りたかったのですが、なかなか作り方・運用をどうしたものか悩んでました。\n\n今回Trelloを使ってみたらなかなかいい感じにできたので、やった内容をメモしてみます。","content":"![f:id:o_tomomichi:20170917204443p:plain](https://storage.googleapis.com/blog-notsobad/images/20170917204443.png \"f:id:o_tomomichi:20170917204443p:plain\")\n\n個人で開発しているトーナメント表作成サービス「[THE TOURNAMENT](https://the-tournament.jp/about)」で、今後の開発予定などを載せた開発ロードマップをTrelloで公開しました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftrello.com%2Fb%2FG9vXQ1rT%2Fthe-tournament%25E9%2596%258B%25E7%2599%25BA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597\" title=\"Trello\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://trello.com/b/G9vXQ1rT/the-tournament%E9%96%8B%E7%99%BA%E3%83%AD%E3%83%BC%E3%83%89%E3%83%9E%E3%83%83%E3%83%97\">trello.com</a></cite>\n\n前から開発ロードマップは作りたかったのですが、なかなか作り方・運用をどうしたものか悩んでました。\n\n今回Trelloを使ってみたらなかなかいい感じにできたので、やった内容をメモしてみます。### なんで開発ロードマップがほしかったか\n\nこれはいくつかあります。\n\n##### サービスがちゃんと運営されてることを伝えたい\n\nまずはこれですね。\n\n開発ロードマップがあると、死んだサービスじゃなくて、 ちゃんといまも積極的に機能追加されている生きたサービスですよってことが伝わるかなと。\n\nWebサービスを探して使うときって、ちゃんと運営が安定してそうなサービスかどうかって大事ですよね。\n\n##### ほしい機能が今後追加されるのかどうかわかるようにしたい\n\n続いてはこれ。\n\n検索などでサイトに来てくれた人が、このサービスを使うかどうかの判断をする際に、当然機能のリストを見ます。\n\nでほしい機能がなかったらふつうはそこで検討から外されてしまうわけですが、そこで開発ロードマップがあればどうでしょう（問いかけ）。\n\nほしい機能が今後の予定に追加されてて、もうすぐ対応してくれそうだなーというのが見えれば、今回は無理でも次つかうときにまた見てくれたりするかもしれないですね。\n\n##### ユーザーの意見や要望が目に見えて反映されるようにしたい\n\n最後にこれ。\n\n問い合わせで機能の要望をいただくことも多いのですが、どうしてもすべてすぐに対応するのは難しくて、順番に対応することになります。\n\nそんなときに開発ロードマップに追加すれば、ちゃんと対応リストに入っていることがわかるし、あとどれくらいで開発の順番が回ってくるかもわかるようになります。\n\n### ロードマップに求めるもの\n\nというわけでロードマップがほしかったのですが、こんな内容をクリアできるといいなーと思ってました。\n\n*   更新・メンテナンスが楽ちん\n*   進捗状況を可視化できる\n*   一般ユーザーが投票できる\n\nよくあるのだと、今後の開発予定を定期的にブログ記事に上げるとかですが、絶対めんどくさくなって更新しない自信あり。\n\nまたリアルタイムに開発進んでる感が出せないのでボツ。\n\nかといってロードマップってサービスの本質的なところではないので、自前で何かシステム作ったりするのは避けたい。\n\nあとは投票もすごくほしかったところで、ユーザーがほしい機能に投票してくれて、要望が多いものから対応していくっていうのは、運営として美しいなーと思うわけです。\n\n### そこでTrelloですよ\n\nというわけで、こういう内容がTrelloだとすべてクリアできるわけですね。\n\nTrelloのボードは一般公開もできるので、これでユーザー向けに公開することができます。\n\nまぁこれは自分で思いついたわけではなくて、実はSlackがやってるというのを記事で見かけたのです。\n\n[Slack、サービスロードマップとアプリ機能アイデア集をTrelloで公開 - ITmedia NEWS](http://www.itmedia.co.jp/news/articles/1604/11/news062.html)\n\nでこれを自分なりにアレンジして、開発ロードマップを作りました。\n\n##### ふだんのタスク管理がそのままロードマップになる\n\n元々自分の開発管理用にTrelloを使っていたのですが、今回それをきれいに整理してロードマップとして公開しました。\n\nこれのなにがいいかというと、いつもどおり粛々とタスクをこなしてTrelloを更新すると、ロードマップも常に最新の状況に保たれるというところです。\n\nロードマップ更新のための追加作業が一切なし！\n\nとはいえ公開できない内容があったら自分用のと二重管理になるかなーと思っていたのですが、意外と全部公開できました。\n\nシンプルでいい感じ。\n\n### というわけで今回のテンプレートを共有します\n\n今回ロードマップを作って、なかなかいい感じに運用できているので、今後他のサービスでもこれをベースにロードマップを作ろうかなと思っています。\n\n（他には[年表作成サービス](https://the-timeline.jp/)とかつくっています）\n\nでよければこのテンプレートを一般共有しようと思いますので、興味のある方はぜひ使ってみて下さい。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftrello.com%2Fb%2FG9vXQ1rT%2Fthe-tournament%25E9%2596%258B%25E7%2599%25BA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597\" title=\"Trello\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://trello.com/b/G9vXQ1rT/the-tournament%E9%96%8B%E7%99%BA%E3%83%AD%E3%83%BC%E3%83%89%E3%83%9E%E3%83%83%E3%83%97\">trello.com</a></cite>\n\n##### 使い方\n\nTrelloでTHE TOURNAMENTの開発ロードマップにアクセスして、「ボードメニューを表示」から「ボードをコピー」を選択すれば、自分のアカウントにロードマップをコピーできるはずです。\n\nカードなしでボード構成だけコピーすることもできるので、カードはご自分で追加するのがよいと思います。\n\nおすすめポイントとしては、一番左の「❓このロードマップについて」ボードが充実しています。\n\nぜひ自分なりにアレンジして使ってみて下さい。\n\n* * *\n\n実際ロードマップを公開してみると、勝手に自分にプレッシャーがかかっていい感じです。ぜひお試しください。\n\nまた個人開発がんばってる仲間は随時募集中で、定期的に勉強会とかもやってます。\n\nロードマップ作ったよーとか勉強会に参加してみたいーって人とかいたら、ぜひ教えてくれるとうれしいです。\n\nおしまい。","date":1506649504000,"image":"https://storage.googleapis.com/blog-notsobad/images/20170917204443.png","tag":["個人開発論","Trello"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"1lOvyA6nfAuucVOE8FoGky","type":"Entry","createdAt":"2020-05-27T09:06:59.360Z","updatedAt":"2020-06-13T04:01:35.607Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"「この世界の片隅に」原作の出来事を年表で整理してみる","slug":"「この世界の片隅に」原作の出来事を年表で見てみる","excerpt":"ずっと気になっていたけどなかなか観れなかった、「この世界の片隅に」を観てきました。\n\n感想・考察は色んな方がたくさん書かれているので特に書けることもありませんが、 絶対に観るべき映画と言ってよいと思います。まだの方はぜひ観てきてください。\n\n今回はこの映画の原作の年表がWikipediaに整理されていたため、 THE TIMELINEで年表表示してみました。","content":"ずっと気になっていたけどなかなか観れなかった、「この世界の片隅に」を観てきました。\n\n感想・考察は色んな方がたくさん書かれているので特に書けることもありませんが、 絶対に観るべき映画と言ってよいと思います。まだの方はぜひ観てきてください。\n\n今回はこの映画の原作の年表がWikipediaに整理されていたため、 THE TIMELINEで年表表示してみました。年表の元データはこちら。\n\n[この世界の片隅に - Wikipedia](https://ja.wikipedia.org/wiki/%E3%81%93%E3%81%AE%E4%B8%96%E7%95%8C%E3%81%AE%E7%89%87%E9%9A%85%E3%81%AB#.E7.89.A9.E8.AA.9E.E3.81.AE.E5.B9.B4.E8.A1.A8)\n\n*   ※映画版にはないエピソードなども入っています。\n*   ※未読の方はネタバレになりますので注意してください。\n\n<iframe width=\"100%\" height=\"500px\" seamless=\"\" frameborder=\"0\" src=\"https://app.the-timeline.jp/?key=1JmnN_XAVt-JW8YfadjTxaagy813_chX6D5N6fcgc8LU&amp;start=19031022010671&amp;end=19830729071161\"></iframe>\n\n全画面表示したい方はこちら。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fapp.the-timeline.jp%2F%3Fkey%3D1JmnN_XAVt-JW8YfadjTxaagy813_chX6D5N6fcgc8LU%26start%3D19210119162813%26end%3D19660429073186\" title=\"THE TIMELINE\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://app.the-timeline.jp/?key=1JmnN_XAVt-JW8YfadjTxaagy813_chX6D5N6fcgc8LU&amp;start=19210119162813&amp;end=19660429073186\">app.the-timeline.jp</a></cite>\n\n戦争のころの話に触れると、いつも何というか自分の甘さに後ろめたさを感じます。\n\nがんばりたいものですね。","date":1485337689000,"tag":["年表","この世界の片隅に"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"5cYXKlZ5aKbNYlpNyioguv","type":"Entry","createdAt":"2020-05-27T09:07:00.853Z","updatedAt":"2020-06-13T04:01:39.248Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"これまで6年間に個人で開発してきた7個のWebサービスを振り返って、サービス開発のモチベーションを考えてみた","slug":"2016/12/30/Webサービス個人開発のモチベーション","excerpt":"むかし、Webサービスを自分でも作れるようになりたい！と一念発起して、26歳文系未経験からWeb業界に転職しました。\n\n結局仕事ではエンジニアじゃなくディレクターになってしまったのですが、個人開発でこれまでいろんなサービスを作ってきました。\n\nというわけで自分用の備忘として、これまでの個人開発でつくったものの記録です。\n\nだいぶ長文になってしまったので、おヒマなときにでもお読み下さい。","content":"むかし、Webサービスを自分でも作れるようになりたい！と一念発起して、26歳文系未経験からWeb業界に転職しました。\n\n結局仕事ではエンジニアじゃなくディレクターになってしまったのですが、個人開発でこれまでいろんなサービスを作ってきました。\n\nというわけで自分用の備忘として、これまでの個人開発でつくったものの記録です。\n\nだいぶ長文になってしまったので、おヒマなときにでもお読み下さい。目次\n--\n\n*   ブンゴウフリック\n*   booklovesmusic\n*   百/一\n*   THE TOURNAMENT\n*   スマホde百人一首\n*   Tab Sekki\n*   THE TIMELINE\n\n以下年代順に、それぞれのサービスを作ったときのこと。\n\n* * *\n\nブンゴウフリック（2011年）\n===============\n\n![f:id:o_tomomichi:20161228133148p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228133148.png \"f:id:o_tomomichi:20161228133148p:plain\")\n\n※サービス終了\n\nApplefanさんでレビューいただいているものが残っていました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.applefan2.com%2F25356\" title=\"【ブンゴウフリック】文豪が記した印象的な一節を書き写せるアプリ。作品の味わい深さを感じ取ろう。\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.applefan2.com/25356\">www.applefan2.com</a></cite>\n\n#### 技術/環境\n\n*   iPhoneアプリ\n*   Titanium（JS）\n\n#### ひとこと紹介\n\n「ブンゴウフリック」は、文豪の残した趣ある一節を書き写して、作品のリズムや味わい深さを感じ取るためのアプリです。\n\n#### 制作事情\n\n記念すべき初めてのサービスで、なぜかいきなりiPhoneアプリ。 このあと現在に至るまで基本アプリには手を出していないので、いま振り返るとなんでそっち行った感が半端ない。\n\nでも2011年当時はやっぱりスマホアプリって超かっこよかったし、アプリ作れるってすごく夢があったんですよね。\n\nそのときは完全初心者からPHPを仕事で３ヶ月ほどさわったくらいのぺーぺーだったので、とてもObjective-Cなんて手を出せず（いまも出せない）。\n\nJavascript（まださわったことなかったけど）というとても汎用的な言語でアプリが作れるらしい、という触れ込みにクラっときて、ついついTitaniumに手を出してしまったみたいです。\n\nちなみにこの頃はコードのバージョン管理なんて概念はまだなかったし、もう手元にソースも存在しておりません。\n\n自分で動くもの作ってるっていうのが楽しくてしょうがなかったので、とにかく作りあげることに集中してました。 毎週末カフェに集まって、同じようにアプリ開発してる友人と一緒に作業してたのがなつかしい。\n\n結果的にいくつかレビューサイトでも取り上げていただいて、数千インストールくらいは達成してました。\n\nそのときはよくわからなかったけど、いま思うとなかなか悪くない数字な気がします。\n\n* * *\n\nbooklovesmusic（2011年）\n=====================\n\n![f:id:o_tomomichi:20161228141421p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228141421.png \"f:id:o_tomomichi:20161228141421p:plain\")\n\n※サービス終了\n\nLifehackerさんで紹介いただいた記事はこちら。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.lifehacker.jp%2F2012%2F05%2F120507booklovesmusic.html\" title=\"読書にぴったりの音楽をおすすめし合うサービス｢booklovesmusic｣\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://www.lifehacker.jp/2012/05/120507booklovesmusic.html\">www.lifehacker.jp</a></cite>\n\n#### 技術/環境\n\n*   CakePHP\n*   ロリポップ\n\n#### ひとこと紹介\n\nbooklovesmusic(ブック・ラブズ・ミュージック)は、いま読んでいる本にぴったりの音楽をおすすめしてくれるサービスです。\n\n#### 制作事情\n\n前作ブンゴウフリックでアプリに懲りたあと、Webに戻ってはじめて本格的にフレームワークとか使ってみた事案。\n\nこのときでWeb業界に入ってちょうど半年くらいだったような。\n\nMVCとか研修では聞いたけど全然理解しきれてなくて、CakePHPで自動生成される複雑なフォルダ構成に絶望感を覚えたことが印象的です。\n\nいま振り返るとシステム的にはけっこうやばくて、\n\n*   コードのバージョン管理はまだ導入してない\n*   ステージングとかないので本番一発勝負\n*   なのにデプロイはFTPで、壊れたけど元に戻せなくて泣きそうになってた\n*   YoutubeAPIのライブラリを入れたけど、動かないのでgrepしてライブラリ内のパスを全部手動で書き換えた\n\nと、無邪気に好き放題してました。楽しかった。。\n\nありがたいことにリリース後いくつかのメディアやブログなどで取り上げていただき、それなりにユーザーも集まりました。\n\n特にLifehackerさんで紹介いただいた時はアクセスが集中し、ロリポップの最安プランで動いてたシステムは一瞬で落ちました。\n\nこのサービスで何より学んだのは、「自分の作ったものが評価されるというのは最高に気持ちいい」という強烈な体験でした。\n\n今でも時々リニューアルを考えてみたりするくらい、非常に思い入れの強いサービスです。\n\n* * *\n\n百/一（2013年）\n==========\n\n![f:id:o_tomomichi:20161228144142p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228144142.png \"f:id:o_tomomichi:20161228144142p:plain\")\n\n※サービス終了\n\nがんばって自分で書いたプレス記事はこちら。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.value-press.com%2Fpressrelease%2F108108\" title=\"百人一首を１ヶ月くらいで覚えるためのサービス「百/一[ひゃくいち]」リリース | ValuePress!\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.value-press.com/pressrelease/108108\">www.value-press.com</a></cite>\n\n#### 技術/環境\n\n*   Rails\n*   Heroku\n\n#### ひとこと紹介\n\n百/一（ひゃくいち）は、うまいこと設計された学習システムによって、百人一首をだいたい１ヶ月くらいでおぼえることができるサービスです。\n\n#### 制作事情\n\n前作からちょっと時間が空いてるのは、この間にFjordさんのリモートインターンに参加して、Railsの勉強をしていたからですね。\n\n[http://fjord.jp/internship](http://fjord.jp/internship)\n\nでその卒業制作として（勝手に）作ったのがこの「百/一」でしたが、結果的に前2作に比べても全然泣かず飛ばずの悲しい結果になってしまいました。\n\n前作のbooklovesmusicは「一発ネタ」っぽいところがあり、継続して使ってくれる人がいなかったという問題意識がありました。\n\n集客はできたんだから、次はちゃんと使い続けてもらえるものを作りたい、というくらいの気持ちだったんですが、まぁちょっと調子に乗ってたんでしょうね。\n\n百人一首は好きなテーマなのでこのときは不完全燃焼感があったのですが、後に「スマホde百人一首」をリリースして、個人的には多少リベンジできた感じです。\n\n* * *\n\nTHE TOURNAMENT（2014年）\n=====================\n\n![f:id:o_tomomichi:20161228150156p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228150156.png \"f:id:o_tomomichi:20161228150156p:plain\")\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-tournament.jp%2Fabout\" title=\"THE TOURNAMENT | 簡単・便利な無料のトーナメント表作成サービス\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-tournament.jp/about\">the-tournament.jp</a></cite>\n\n#### 技術/環境\n\n*   Rails\n*   Heroku\n*   TwitterBootStrap\n\n#### ひとこと紹介\n\nTHE TOURNAMENT(ザ・トーナメント)は、簡単・便利な無料のトーナメント表作成サービスです。\n\n#### 制作事情\n\nようやく現在も運用中のサービスが出てきました。\n\n前作「百/一（ひゃくいち）」の失敗を受け、いろいろ反省して作ったサービスです。 結果的に今まで作ったなかで運用期間も最も長く、自分の代表作といえるサービスになりました。\n\n*   はじめて個人で作ったWebサービスで、売り上げを上げることができた（有料プランの販売）\n*   SEOを意識して、狙ったワードで検索上位に上げることができた\n*   同時アクセス1万という、自分にとっては過去最高のアクセス量をさばく設計にできた\n\nとはいえ初めて売り上げを上げるまでに3年もかかってるし、全然いばれる金額でもないのですが、 自分が作ったWebサービスにお金を払ってくれる人がいるというのは、はっきり言って死ぬほどうれしかったです。\n\nお金が入るのはもちろんうれしいんですが、何というか、お金を払ってでもそのサービスを使いたい、と思ってもらえるものを作れたというのが、やはり作ってる側としてはめちゃめちゃうれしいですね。\n\n* * *\n\nスマホde百人一首（2015年）\n================\n\n![f:id:o_tomomichi:20161228152819p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228152819.png \"f:id:o_tomomichi:20161228152819p:plain\")\n\n[https://karta.notsobad.jp/](https://karta.notsobad.jp/)\n\n#### 技術/環境\n\n*   Sinatra\n*   Heroku\n*   SemanticUI\n\n※後にFirebaseでリニューアル\n\n#### ひとこと紹介\n\nスマホde百人一首は、みんなのスマホを取り札にして遊べる、お正月にぴったりの百人一首サービスです。\n\n#### 制作事情\n\nTHE TOURNAMENTを作ったあと、自分の中でサービスを作るモチベーションみたいなのが多少変わっていました。\n\nいわゆるフルスペックのWebサービスをがっつり作るのはある程度満足したけど、やっぱり定期的に新しいものは作りたくなるし、ときどきはゼロイチでモノを作らないと新しい技術から取り残されてしまうし、みたいな危機感もあったり。\n\nというわけで小規模なサービスでシンプルにネタ勝負！として作ったのがこの「スマホde百人一首」です。\n\n*   ユーザー登録とか一切不要で、QRコード読み込むだけでその場のみんなで一緒に遊べる\n*   アプリじゃなくてただのWebなのに、みんなのブラウザが勝手に同期して更新される\n\nというところが、企画的にも技術的にもちょっとおもしろいことができたんじゃないかというところです。\n\nユーザー登録させない利便性みたいなところは、調整さんリスペクト。\n\n百人一首というテーマでそれなりに満足いくものが作れたという意味でも、個人的にお気に入りのサービスです。\n\n* * *\n\nTab Sekki（2016年）\n================\n\n![f:id:o_tomomichi:20161231230331p:plain](https://storage.googleapis.com/blog-notsobad/images/20161231230331.png \"f:id:o_tomomichi:20161231230331p:plain\")\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Ftab-sekki-%25E4%25BA%258C%25E5%258D%2581%25E5%259B%259B%25E7%25AF%2580%25E6%25B0%2597%25E4%25B8%2583%25E5%258D%2581%25E4%25BA%258C%25E5%2580%2599%2Fhpiplbccmdafmjoompeplcakgghggcfh\" title=\"Tab Sekki - 二十四節気七十二候\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/tab-sekki-%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%80%E6%B0%97%E4%B8%83%E5%8D%81%E4%BA%8C%E5%80%99/hpiplbccmdafmjoompeplcakgghggcfh\">chrome.google.com</a></cite>\n\n#### 技術/環境\n\n*   Chrome拡張\n*   Javascript\n*   SemanticUI\n\n#### ひとこと紹介\n\nTabSekkiは、ブラウザの新しいタブに二十四節気七十二候の現在の暦を表示してくれるChrome拡張機能です。\n\n#### 制作事情\n\nChrome拡張に初挑戦。\n\nあたらしいものを作りたいけどとにかくメンテナンスがめんどくさくて、 作りっぱなしで満足できるものが作りたくなって発作的に作ったやつです。\n\n技術的には何にもおもしろいことしてないけど、デザインは自分なりになかなかがんばりました。\n\nとくに言うこともないくらいシンプルなサービスだけど、個人的にほしかったものを作ったので自分は愛用しています。\n\n72候それぞれで色が違うので、見慣れた頃に急に新しいタブが違う色になって、ああ季節変わったんだーって気付けるのが個人的には超いい感じです。\n\nやっぱり個人開発の基本はドッグフーディング。\n\n* * *\n\nTHE TIMELINE（2016年）\n===================\n\n![f:id:o_tomomichi:20161228153959p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228153959.png \"f:id:o_tomomichi:20161228153959p:plain\")\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-timeline.jp%2F\" title=\"簡単・便利な無料の年表作成サービス | THE TIMELINE(ザ・タイムライン)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-timeline.jp/\">the-timeline.jp</a></cite>\n\n#### 技術/環境\n\n*   Riot.js\n*   Firebase\n*   SemanticUI\n\n#### ひとこと紹介\n\nTHE TIMELINE(ザ・タイムライン)は、簡単・便利な無料の年表作成サービスです。\n\n#### 制作事情\n\n最新作は、トーナメント以来久々にがっつりのWebサービスです。\n\nトーナメントは非常に気に入ってるサービスではあるのですが、何で自分がこれを運用しているのか、という社会的意義みたいなところが弱い部分ではありました。ニーズから逆算して作ったサービスゆえの弱みですね。\n\nそんななか、THE TOURNAMENTで学んでうまくいったところは活かしつつ、自分が社会を積極的にこう変えていきたい、という思いを込めたサービスを世に出したいという思いはずっとあり、ようやく多少はそれに合致するかなと思えたのがこの「THE TIMELINE」です。\n\n年表作成ってふつうに生きてるとまずしないと思うんですが、作ってみるとめちゃくちゃおもしろいわけですよ。\n\nこち亀が40年続いてすごい！っていうのも、こうやって年表にするとそのすごさが視覚的にわかるし。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2016%2F12%2F15%2F%25E9%2580%25B1%25E5%2588%258A%25E5%25B0%2591%25E5%25B9%25B4%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25B3%25E3%2583%2597%25E3%2581%25A7%25E9%2580%25A3%25E8%25BC%2589%25E4%25B8%25AD%25E3%2581%25AE%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25AC%25E3%2582%2592%25E5%25B9%25B4%25E8%25A1%25A8%25E3%2581%25A7%25E6%2595%25B4%25E7%2590%2586\" title=\"週刊少年ジャンプで連載中のマンガを年表で整理してみた。 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2016/12/15/%E9%80%B1%E5%88%8A%E5%B0%91%E5%B9%B4%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%97%E3%81%A7%E9%80%A3%E8%BC%89%E4%B8%AD%E3%81%AE%E3%83%9E%E3%83%B3%E3%82%AC%E3%82%92%E5%B9%B4%E8%A1%A8%E3%81%A7%E6%95%B4%E7%90%86\">blog.notsobad.jp</a></cite>\n\nだまされたと思って一度年表つくってみると、絶対おもしろいこと間違いなしです。\n\nというのが企画的な話なんですが、技術的には数年間お世話になってRails x Herokuを離れて、 Riot x Firebaseという新しいフレームワークに手を出しています。\n\nどちらも学習コストが低くて今のところかなりいい感じなので、 もうちょっとこなれてきたらトーナメントもフルリニューアルありえるで。。\n\n* * *\n\nまとめ\n===\n\nという感じでいままで作ってきたものを振り返ってみました。\n\nモチベーション的には、\n\n*   最初はとにかく作ってるだけで楽しい\n*   次はユーザーもっと増やしたい、お金稼げるようにしたい、技術的におもしろいことしたい、志のあることをしたい、とどんどん要求が高くなる\n*   とはいえ一度クリアしたのを毎回クリアできるわけでもなく、前作より集客失敗して空回りとかもよくある\n\nという感じで、できることも増えたけどその分自分の満足のハードルも上がっちゃって、やっぱり毎回手探りでがんばってますという感じですね。。\n\nあと6年で7個って少ない気もするけど、実際にはこの間に制作に至らなかったボツ企画や、 とりあえず作ったけどすぐに飽きて公表に至らないような小粒なやつもあったりします。\n\nしかしさすがに6年もやってるとやりたいことは大体できるようになってきた感もあるので、 ちゃんと自分が本当にいいと思えるものを作って、きちんと運用していきたいなと思う次第です。\n\nまぁそれがむずかしいんですけどね。。\n\nとりあえず2017年はトーナメントと年表でがんばりたいと思います。 おしまい。","date":1483050991000,"tag":["ポエム","個人開発論","つくったもの"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"1QWGxdPuxTuaZ9GweeMnaq","type":"Entry","createdAt":"2020-05-27T09:07:01.680Z","updatedAt":"2020-06-13T04:01:42.792Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Riot.js x Firebaseで作る、超お手軽なパスワード不要のログインシステム「Magic Login」","slug":"2016/12/28/Riot_x_Firebaseで作る、超お手軽なパスワード不要のログイン","excerpt":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。","content":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。環境\n--\n\n*   Firebase: 3.5.0\n*   Riot.js: 3.0.0\n*   SemanticUI: 2.2.4\n\nFirebase x Riot.jsのセットアップ\n-------------------------\n\nこの2つを使ったシステムのセットアップについては、  \nむかしQiitaに記事書きましたのでこちらを参考にしてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F43da4d35007e69d0f484\" title=\"【Riot.js v3対応】Riot.js x Firebase で超お手軽にWebアプリを作ってみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/43da4d35007e69d0f484\">qiita.com</a></cite>\n\n以下この記事の内容をベースに追加修正していきます。\n\n実装方針\n----\n\n*   サイトに訪問したら自動で匿名ユーザーとしてログインさせる\n*   メアドを入力したら、そのアドレスにトークン付きのワンタイムログインリンクを送る\n*   リンクを踏んで来たらログインさせる\n*   匿名ユーザーで作成してたデータを本ユーザーアカウントに紐づける（今回は省略）\n\nこんな感じ。\n\n今回はユーザーが新規登録かログインかを意識せずに使えるように設計してみました。\n\nメアド入れたときに、既登録ならそのままログインリンクを送り、未登録なら新規登録した上でログインリンクを送る、という感じにしています。\n\n新規登録とログインの間違えってけっこう多いし、そんなんシステムで判断してくれよ、って個人的には思うのですよね。。\n\nログイン画面\n------\n\n### 完成イメージ\n\nこんな感じの見た目にしていきます。\n\n![f:id:o_tomomichi:20161228105538p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228105538.png \"f:id:o_tomomichi:20161228105538p:plain\")\n\nSlackのメールだけログイン画面にあからさまに影響を受けた、メールと魔法の杖のアイコンがすてきです。\n\nなんとこれ、画像一切つかわずやってるってなかなかすごくないですか。  \nSemanticUIのアイコン合成機能です。Semanticすごい！\n\n### 実装\n\nauth.tagをこんな感じで実装。\n\n<auth>\n  <div class=\"ui padded basic segment\">\n    <br><br>\n    <div class=\"ui three column center aligned stackable grid\">\n      <div class=\"ui column\">\n        <div class=\"ui center aligned basic segment\">\n            <i class=\"icons\">\n              <i class=\"purple inverted mail circular huge icon\"></i>\n              <i class=\"horizontally flipped wizard huge icon\"></i>\n            </i>\n            <h1 class=\"ui header\">\n              Magic Login\n              <div class=\"sub header\">\n                Get a magic linked email for super easy sign-in;)\n              </div>\n            </h1>\n          <div class=\"ui action fluid input\">\n            <input type=\"text\" ref=\"email\" placeholder=\"Type your email here.\">\n            <button class=\"ui pink right labeled icon button\" onclick={ magicAuth }>\n              <i class=\"send icon\"></i>\n              Send\n            </button>\n          </div>\n          <div if={ message } class=\"ui visible left aligned basic segment { message.type } message\">{ message.text }</div>\n        </div>\n      </div>\n    </div>\n    <br><br>\n  </div>\n\n\n  <script>\n    var that = this\n\n    firebase.auth().onAuthStateChanged(function(user) {\n      that.user = user\n    })\n\n    magicAuth() {\n      that.errorMessage = ''\n      var newPassword = Math.random().toString(36).slice(-12)\n\n      firebase.auth().createUserWithEmailAndPassword(that.refs.email.value, newPassword).then(function(){\n        //新規ユーザーの場合\n        firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n        firebase.auth().signOut()\n        that.message = {\n          type: 'success',\n          text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n        }\n      }).catch(function(error) {\n        //アドレスが既に登録済みの場合\n        if(error.code == 'auth/email-already-in-use') {\n          firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n          that.message = {\n            type: 'success',\n            text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n          }\n        //validationエラーなど\n        }else {\n          that.message = {\n            type: 'error',\n            text: error.message\n          }\n        }\n      }).then(function(){\n        that.update()\n      })\n    }\n  </script>\n</auth>\n\nキモは`firebase.auth().sendPasswordResetEmail(that.refs.email.value)`の部分で、要するにパスワードリセットメールを送ってるのですね。\n\nこれを踏んだあとの処理を魔改造することで、マジックログインを超簡単に実装しています。  \n次はそっちを見てみましょう。\n\n### リンク踏んだあとの処理\n\nriot.jsのroutingで、ログインメールのリンク踏んだときの処理を受け付けています。\n\n    route('/auth..', function(){\n      var q = route.query()\n      if(q.mode == 'resetPassword') {\n        firebase.auth().verifyPasswordResetCode(q.oobCode).then(function(email) {\n          var newPassword = Math.random().toString(36).slice(-12)\n          firebase.auth().confirmPasswordReset(q.oobCode, newPassword).then(function(){\n            firebase.auth().signInWithEmailAndPassword(email, newPassword)\n            alert('ログインしました')\n          })\n        }).catch(function(error){\n          alert('ログインに失敗しました..')\n        })\n      }\n    })\n\n`auth?mode=resetPassword&oobCode=xxxxxx`という感じのURLを踏んでくるイメージです。  \n（パラメータはFirebaseが自動付与）\n\nやってることは、\n\n*   `verifyPasswordResetCode(q.oobCode)`でトークンの検証\n*   正しいトークンならランダムに生成した文字列を新パスワードに設定\n*   新パスワードでログイン\n\nというだけです。\n\nキモは新パスワードをユーザーが意識することはないし、システム側でも管理しないというところ。超セキュア！\n\n次ログインするときはまたリセットするだけですからね。\n\n### Firebaseの設定\n\nFirebase側では、ログインメール（＝パスワードリセットメール）のリンクURLを設定しておきます。\n\nConsoleで、\n\n> Authentication > メールテンプレート > パスワードの再設定\n\nから設定を編集し、「アクションURLをカスタマイズ」というメニューで好きなURLを設定しておきます。\n\n> `https://hogehoge.com/auth`\n\nこんな感じで設定しておけば、パラメータ部分はFirebaseが自動で付与してくれます。\n\nまとめ\n---\n\nというわけで、Firebaseの標準機能に乗っかることで超お手軽にMagicLoginが実装できました。\n\nこの記事では触れなかったけど、アクセス時に全員匿名ユーザーとして裏でログインさせておいて、 データを永続化したいときはこの仕組みで簡単ログイン、という組み合わせにするとかなりいい感じです。\n\nこのサービスで実践投入してますので、よければどんな感じか見てみてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-timeline.jp%2F\" title=\"簡単・便利な無料の年表作成サービス | THE TIMELINE(ザ・タイムライン)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-timeline.jp/\">the-timeline.jp</a></cite>\n\n年表たのしいでよ。","date":1482891904000,"tag":["つくったもの","技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"4PbaesNaMHcfRaLF64nSCg","type":"Entry","createdAt":"2020-05-27T09:07:02.407Z","updatedAt":"2020-06-13T04:01:45.390Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"週刊少年ジャンプで連載中のマンガを年表で整理してみた。","slug":"2016/12/15/週刊少年ジャンプで連載中のマンガを年表で整理","excerpt":"![f:id:o_tomomichi:20161215010519p:plain](https://storage.googleapis.com/blog-notsobad/images/20161215010519.png \"f:id:o_tomomichi:20161215010519p:plain\")\n\nジャンプで長期連載していた人気作品の連載終了が相次いでいます。\n\n[『こち亀』『暗殺教室』『BLEACH』……人気作の連載終了が続く「ジャンプ」で、“次に推されている”作品とは？｜おたぽる](http://otapol.jp/2016/10/post-8366_entry.html)\n\n数年前はワンピ・ナルト・BLEACHが三大看板だった時期もありましたが、 うち2016年12月現在で残っているのはワンピースのみ。\n\n数年前から超長期作品と激しく入れ替わるその他作品という感じでしたが、いま連載されている作品がいつ頃始まってるのか、気になったので年表で整理してみました。","content":"![f:id:o_tomomichi:20161215010519p:plain](https://storage.googleapis.com/blog-notsobad/images/20161215010519.png \"f:id:o_tomomichi:20161215010519p:plain\")\n\nジャンプで長期連載していた人気作品の連載終了が相次いでいます。\n\n[『こち亀』『暗殺教室』『BLEACH』……人気作の連載終了が続く「ジャンプ」で、“次に推されている”作品とは？｜おたぽる](http://otapol.jp/2016/10/post-8366_entry.html)\n\n数年前はワンピ・ナルト・BLEACHが三大看板だった時期もありましたが、 うち2016年12月現在で残っているのはワンピースのみ。\n\n数年前から超長期作品と激しく入れ替わるその他作品という感じでしたが、いま連載されている作品がいつ頃始まってるのか、気になったので年表で整理してみました。### ジャンプ連載年表はこちら\n\n<iframe width=\"100%\" height=\"500px\" seamless=\"\" frameborder=\"0\" src=\"https://app.the-timeline.jp/?key=1j4-SgB0Iw3RI-jR_4bQWpfMKzkdi9FbxALW8eqNwAI0&amp;start=19940706004739&amp;end=20190630220845\"></iframe>\n\n小さくて見にくい場合は、以下のリンクから全画面で見て下さい。\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fapp.the-timeline.jp%2F%3Fkey%3D1j4-SgB0Iw3RI-jR_4bQWpfMKzkdi9FbxALW8eqNwAI0%26start%3D19940706004739%26end%3D20190630220845\" title=\"THE TIMELINE\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://app.the-timeline.jp/?key=1j4-SgB0Iw3RI-jR_4bQWpfMKzkdi9FbxALW8eqNwAI0&amp;start=19940706004739&amp;end=20190630220845\">app.the-timeline.jp</a></cite>\n\n### 連載中と言いながら\n\n連載中のものだけだと個人的に知らないのばっかりでつまらなくなったので、ここ最近連載終了した人気作品も合わせて掲載しました。\n\n結果として、2016年がジャンプにとって本当に大変な年になっているのがよくわかりますね。長く続いてた作品が軒並み終わっとる。。\n\nそしてわかってはいたけど、こち亀が入るとデータがゆがむ。なんだこれ。。\n\n### ジャンププラスはおもしろい\n\n現在残っている長期連載陣は\n\n*   ONE PIECE\n*   HUNTER x HUNTER\n*   銀魂\n\nの3作品ですが、銀魂もすでに最終章に入っており、ハンタについてはみなさんご存知のとおり。。と非常に悲しい状況です。\n\nなんだかんだ昔からずっと読んでいるファンとしては、ここからまたジャンプでおもしろい作品が出てくるのを楽しみにしたいところ。\n\nというか自分が読んでないだけですでにいい作品あるのかもだけど。 磯兵衛はおもしろいかったし、ヒーローアカデミアも評判いいらしいし（読んでない）。\n\nそういえばジャンププラスの方だと、ファイアパンチとかとんかつDJとかおもしろいの多い気がするけど、本誌に持ってきたりはしないんだろうか。\n\nマンガも過渡期で大変そうですね。。","date":1481733120000,"image":"https://storage.googleapis.com/blog-notsobad/images/20161215010519.png","tag":["年表"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"4AUjakGHcxXGhwSWt8w2s","type":"Entry","createdAt":"2020-05-27T09:07:03.447Z","updatedAt":"2020-06-13T04:01:48.464Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" 村上春樹「1973年のピンボール」を年表で整理してみた【Part.6】","slug":"2016/12/12/村上春樹「1973年のピンボール」part6","excerpt":"![f:id:o_tomomichi:20161212202747p:plain](https://storage.googleapis.com/blog-notsobad/images/20161212202747.png \"f:id:o_tomomichi:20161212202747p:plain\")\n\n村上春樹「1973年のピンボール」内の出来事を時系列で整理し、 年表を作ってみるという誰得記事シリーズです。\n\n前回はこちら。 <iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2016%2F12%2F12%2F%25E6%259D%2591%25E4%25B8%258A%25E6%2598%25A5%25E6%25A8%25B9%25E3%2580%258C1973%25E5%25B9%25B4%25E3%2581%25AE%25E3%2583%2594%25E3%2583%25B3%25E3%2583%259C%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258Dpart5\" title=\" 村上春樹「1973年のピンボール」を年表で整理してみた【Part.5】 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.notsobad.jp/entry/2016/12/12/%E6%9D%91%E4%B8%8A%E6%98%A5%E6%A8%B9%E3%80%8C1973%E5%B9%B4%E3%81%AE%E3%83%94%E3%83%B3%E3%83%9C%E3%83%BC%E3%83%AB%E3%80%8Dpart5\">blog.notsobad.jp</a></cite>\n\nPart.6はいよいよ完結編！  \nここまで整理してみてわかったこと・わからなかったことを総括したいと思います。\n\nよろしければもう少しだけおつきあいくださいませ。。","content":"![f:id:o_tomomichi:20161212202747p:plain](https://storage.googleapis.com/blog-notsobad/images/20161212202747.png \"f:id:o_tomomichi:20161212202747p:plain\")\n\n村上春樹「1973年のピンボール」内の出来事を時系列で整理し、 年表を作ってみるという誰得記事シリーズです。\n\n前回はこちら。 <iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2016%2F12%2F12%2F%25E6%259D%2591%25E4%25B8%258A%25E6%2598%25A5%25E6%25A8%25B9%25E3%2580%258C1973%25E5%25B9%25B4%25E3%2581%25AE%25E3%2583%2594%25E3%2583%25B3%25E3%2583%259C%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258Dpart5\" title=\" 村上春樹「1973年のピンボール」を年表で整理してみた【Part.5】 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.notsobad.jp/entry/2016/12/12/%E6%9D%91%E4%B8%8A%E6%98%A5%E6%A8%B9%E3%80%8C1973%E5%B9%B4%E3%81%AE%E3%83%94%E3%83%B3%E3%83%9C%E3%83%BC%E3%83%AB%E3%80%8Dpart5\">blog.notsobad.jp</a></cite>\n\nPart.6はいよいよ完結編！  \nここまで整理してみてわかったこと・わからなかったことを総括したいと思います。\n\nよろしければもう少しだけおつきあいくださいませ。。シリーズ全体の目次\n=========\n\n*   まえがき\n*   完成版年表\n*   年表の作成手順\n    *   序盤（Chapter0~7）：プロローグ〜ラバー・ソウル\n    *   中盤（Chapter7~13）：ラバー・ソウル〜ピンボール探し\n    *   後半（Chapter13~20）：ピンボール探し〜講師からの連絡\n    *   終盤（Chapter20~26）：講師からの連絡〜エピローグ\n    *   回想の出来事たち\n*   わかったこと/わからなかったこと（★今回）\n*   まとめ（★今回）\n\nわかったこと/わからなかったこと\n================\n\nここまで年表を作成してみましたが、 次はこれによってわかったこと・わからなかったことを考えてみたいと思います。\n\n### 意外と時系列は混乱していない\n\nこれが個人的には今回整理して一番の収穫でした。  \nどうやらこの物語は、最初の印象ほどには時系列が混乱していなさそうです。\n\n時系列仮説を置いて出来事を並べているのでそりゃそうだろという話もありますが、 既に言い訳したように、重要なのは仮説を前提としてできた年表が、納得のいくものになっているかどうかです。\n\n結果としてはこの仮説のもとで大きな矛盾もなく、物語内の出来事がきれいに時系列で整理できたように思います。 （序盤の出来事は多少時系列が前後していますが）\n\n回想が何回も入り、主観も入れ替わることで勝手に混乱していましたが、この年表で考えると、主要な物語は非常にシンプルに、単線的に進んでいると解釈できそうです。\n\n### 章分けの規則性が崩れるのは「配電盤の葬式」のあと\n\n年表を「僕」と鼠で色分けした結果、「僕」と鼠の章が交互に続いていたルールがChapter12で崩れていることに気づきます。 （Chapter10が鼠、Chapter11が「僕」なので、ここまでのルールだと次は鼠になるところが、Chapter12も「僕」の話が続く）\n\n何でだろうということで年表を見てみると、どうやら配電盤の葬式が大きなターニングポイントになっているようです。\n\nChapter11で葬式が終わった後、Chapter12も続けて「僕」が事務所の女の子とランチをする話になり、そこからピンボール探しという物語後半の流れに続いていきます。\n\nまぁそれくらい普通に読んでれば気づくよ、という話かもしれませんが、年表にすることで視覚的にもより明確になりますね（強引）。\n\n### 直子の故郷訪問はなぜこの時期なのか\n\nプロローグの回想群のなかでも中心的な位置を占めるのが、「僕」が直子の故郷を訪れるエピソード。 直子や金星人との会話を間に挟みながら「僕」が踏切で犬を待つシーンは、妙に印象に残ります。\n\n物語冒頭、回想が入り乱れているところなのでわかりづらいですが、この出来事は1973年5月と明記されています。\n\n1973年9月がこの物語の現在時制で、それ以前の回想はほとんどが学生時代の1969~1970年です。 そのためこの直子の故郷訪問は、2つの時間の間に位置する、とても中途半端な時期に思えます。\n\n今回年表にしてみて初めてこの時期が中途半端なことに気づきましたが、同時にわかったのは、どうやらこの訪問は双子が現れた時期と近いらしいということです。\n\n双子の登場が（あるいは双子を呼び寄せるような「僕」の状態が）何かしらきっかけとなって、直子の故郷を訪問させたのでしょうか。\n\nただこれは前向きな影響というより、ますます毎日が深く沈んでいくような感覚を覚えた「僕」が、何とか現状を変えようとした試み（結果としてそれは失敗に終わったようにみえるけれど）だったように思います。\n\nこのあと再び「僕」が過去と向き合えるようになるには、配電盤の葬式を経る必要があったようです。\n\n### 回想が入るタイミング（アパートの女の子の話）\n\nこの作品は回想が多いという印象がありましたが、整理してみると実は主要な回想はほとんど物語冒頭に固まっています（そのせいで余計に時制が混乱するのですが）。\n\nそれ以降で出てくる回想は、電話を取り次ぐアパートの女の子（Chapter5）と、ピンボールに関する回想（Chapter13,15）だけなのです。\n\n年表に整理することで回想の位置が明らかになると、次はどうしてこのタイミングで回想が入るんだろう、ということが気になります。\n\nまずはアパートの女の子の話が回想されたタイミングを考えてみます。\n\n同じアパートの女の子に電話を取り次いでいたエピソード（Chapter5）は、正直唐突に挟まれている印象が強く、今まで読んでいたときは前後のエピソードとの関連性もよくわからないまま、流れていってしまいました。\n\nどうやらこの時期は「僕」が直子を失った時期と重なっているらしいとも思われるのですが、それがこのエピソードでどう扱われているのか、正直よくわからないという感じです。\n\nただ年表で改めて整理してみると、この回想の前後が\n\n*   \\[Chapter3\\] 配電盤の工事\n*   \\[Chapter5\\] アパートの女の子の回想\n*   \\[Chapter5\\] 「僕」が配電盤を見て物思いに耽る\n\nという流れになっていて、配電盤が「僕」にこの記憶を回想させていることがわかります（Chapter4は鼠サイド）。\n\nその視点で改めてこの回想を見直すと、回想内でみんなへの電話を取り次いでいる「僕」自身がまるで配電盤のようにも見えますね。\n\n古くなって死んだ配電盤を見ていた「僕」は、その姿を自分と重ねていたのでしょうか。\n\n### 回想が入るタイミング（ピンボールに関する回想）\n\n次は本編内でのもう一つの回想、ピンボールに関する話が回想されたタイミングを考えてみたいと思います。\n\nピンボールに関する回想が入るのは、配電盤の葬式の後です。\n\n*   \\[Chapter11\\] 配電盤の葬式\n*   \\[Chapter12\\] 葬式後の木曜に、「僕」が事務所の女の子とランチをする\n*   \\[Chapter13\\] ピンボールが「僕」の心を捉える\n*   \\[Chapter15\\] 「僕」が新宿のスペースシップにのめり込む（回想）\n*   \\[Chapter17\\] 「僕」がスペイン語の講師と会う\n\n※Chapter14,16は鼠サイド\n\n先にも確認したように、葬式の後は章分けのルールまで崩れており、この出来事が物語内で非常に大きな意味を持つことがわかります。\n\nChapter15の回想では、「僕」が新宿のスペースシップに異常なのめり込み方をしている姿が描かれます。おそらく直子を失った後なのでしょう。\n\nこの時期のことは直子につながる記憶であり、「僕」にとって思い出したくない過去だったはずです。\n\nその記憶がこのタイミングで想起されているのは、物語の流れからやはり配電盤の葬式が契機になっていると考えて間違いなさそうです。\n\nプロローグで、直子との思い出を整理しようとしたのか「僕」は直子の故郷を訪問していますが、「何も変わらない」という思いで双子の待つ部屋に帰ってきました。\n\nこのとき変わらなかったことが、配電盤の葬式を経たことで「僕」の中で何か変わったようです。葬式後に直子=スペースシップを探しはじめたというのは、「僕」が過去に向き合おうとしはじめている動きのように感じられます。\n\n### 鼠は女と別れるのが早すぎる\n\nあと年表を整理して圧倒的に感じるのが、鼠の交際期間短すぎ疑惑です。\n\n9月1日に出会って8日に寝ているのはさておき、あれほど物語内で深刻に悩んでおいて、女と別れるまでの期間は若干2か月です。早すぎる。\n\nしかも彼は週に一度しか女と会っていません。 11月9日に連絡をやめたので、その前の週まで会っていたとしても、鼠が女と会ったのは\n\n*   9/1, 4, 8, 15, 22, 29\n*   10/6, 13, 20, 27\n*   11/3\n\nと、交際前も含めて計11回です。\n\n10月中旬にはもう女との生活に苦しんでいたようなので、幸せな期間はさらに短かったように思われます。 残念です。\n\nまとめ\n===\n\nというわけで「1973年のピンボール」の年表を作成してみました。 個人的には思ったよりきれいに整理できて、なかなか納得のいくものになったようにも思います。\n\nとはいえ文学的な素養のまったくない素人が好き勝手言ってるだけなので、フィードバックがあればぜひぜひ指摘いただけるとうれしいです。\n\nこんな感じの年表がさくっと作れるなんて、とても便利なサービスですねっていう宣伝で終わろうと思ったけど、実際には「ピンボール」を何回も読み直して日付を特定していく作業がしんどすぎました。 誰か他の作品のも作ってくれるとうれしいです。\n\nとはいえ年表を作るのは色々用途もあるしすごく楽しいので、興味を持った人はぜひぜひ使ってみてくださいませ。 （小説の年表化なんて無謀なことをしなければ、年表作成自体はとても簡単です）\n\n> [THE TIMELINE](https://the-timeline.jp)\n\n長々とお読みいただきありがとうございました。 おしまい。","date":1481546582000,"image":"https://storage.googleapis.com/blog-notsobad/images/20161212202747.png","tag":["1973年のピンボール","年表","村上春樹"]}}]},"tag":null,"page":4,"hasNextPage":true},"__N_SSG":true}
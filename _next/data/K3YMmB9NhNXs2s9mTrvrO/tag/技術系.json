{"pageProps":{"entries":{"items":[{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"3H8aR0rsRg1ceNBK5gCu88","type":"Entry","createdAt":"2020-05-27T09:06:35.765Z","updatedAt":"2020-06-13T04:00:15.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"2011年の個人開発を支えた技術","slug":"2018/12/04/070000","excerpt":"この記事は、「[個人開発サービスに用いられている技術 Advent Calendar 2018](https://crieit.net/advent-calendars/2018/technology)」4日目の記事です。\n\n![f:id:o_tomomichi:20181119185903p:plain](https://storage.googleapis.com/blog-notsobad/images/20181119185903.png \"f:id:o_tomomichi:20181119185903p:plain\")\n\n2011年（なんともう7年前！）に、初めての個人開発で「booklovesmusic（ブック・ラブズ・ミュージック）」というサービスを作りました。\n\n個人的に思い入れが強くサービスが死んでからもドメインを維持してたのですが、さすがにキリがないので今年で更新をやめることにしました。 色々整理してると当時の状況を思い出して懐かしくなったので、供養の意味も込めて2011年当時の個人開発環境を振り返ってみようと思います。\n\nこれから開発しようという方には何の参考にもなりませんが、ちょっとでも懐かしい気持ちになってもらえれば本望です。","content":"この記事は、「[個人開発サービスに用いられている技術 Advent Calendar 2018](https://crieit.net/advent-calendars/2018/technology)」4日目の記事です。\n\n![f:id:o_tomomichi:20181119185903p:plain](https://storage.googleapis.com/blog-notsobad/images/20181119185903.png \"f:id:o_tomomichi:20181119185903p:plain\")\n\n2011年（なんともう7年前！）に、初めての個人開発で「booklovesmusic（ブック・ラブズ・ミュージック）」というサービスを作りました。\n\n個人的に思い入れが強くサービスが死んでからもドメインを維持してたのですが、さすがにキリがないので今年で更新をやめることにしました。 色々整理してると当時の状況を思い出して懐かしくなったので、供養の意味も込めて2011年当時の個人開発環境を振り返ってみようと思います。\n\nこれから開発しようという方には何の参考にもなりませんが、ちょっとでも懐かしい気持ちになってもらえれば本望です。※当時新人エンジニアだった自分の開発環境なので、当たり前ですがこれが当時のスタンダードというわけではありません。またここで挙げてる技術や環境がレガシーというつもりもまったくありませんので誤解なさいませんように。。\n\n* * *\n\nその前にサービスを追悼する\n-------------\n\n### 🤔どんなサービスだったの？\n\nbooklovesmusicは、読書にぴったりの音楽をおすすめしてくれるサービス、というコンセプトでした。\n\n具体的には、好きな本を選ぶとその本に紐付いたYoutubeのプレイリストが表示されるので、それを聴きながら読書を楽しむことができます。\n\n本とプレイリストの紐付けは完全にユーザー投稿型です。 サイト上で好きなYoutubeの動画（音楽）をいくつか選ぶとAPI経由でYoutubeのプレリストを作成し、そのプレイリストと本を紐付ける、という仕様になっていました（がんばってるな。。）\n\n### ☠️一瞬のアクセスと、死\n\nリリース後にいくつかメディアでも取り上げていただき、ありがたいことにデビュー作にしてはそれなりのアクセスがありました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.lifehacker.jp%2F2012%2F05%2F120507booklovesmusic.html\" title=\"読書にぴったりの音楽をおすすめし合うサービス｢booklovesmusic｣\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.lifehacker.jp/2012/05/120507booklovesmusic.html\">www.lifehacker.jp</a></cite>\n\nしかし、当たり前ですがほとんどのユーザーは投稿じゃなくて閲覧しかしなくて、いくら本を検索しても紐づくプレイリストが存在しないという状態でした（そりゃそうですね）。\n\n結局リリースから半年くらいは追加開発しながら運用を続けて、最後は誰にも使われなくなってフェードアウト、、という感じでこのサービスは一生を終えました。南無。\n\nいま振り返ると反省点ばっかりですが、[最初から期待値を下げて開発する](https://blog.notsobad.jp/entry/2018/07/30/110000)のが定番になった最近の自分からすると、当時の勢いみたいなのがうらやましかったりもします。\n\n* * *\n\n当時の開発状況\n-------\n\nというわけでこのbooklovesmusicを開発していた2011年当時の環境を、できるだけ思い出して書いてみようと思います。 不正確な記述もあるかと思いますがご容赦ください。\n\n### 🛠言語/フレームワーク\n\nbooklovesmusicはPHPで開発していて、フレームワークとしてCakePHPを使っていました。まだ1系だったのかな。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcakephp.org%2Fjp\" title=\"CakePHP - Build fast, grow solid | PHPフレームワーク\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cakephp.org/jp\">cakephp.org</a></cite>\n\nこのちょっと前にプログラミング覚えたいと思って未経験の求人を探してたのですが、当時Web界隈ではほとんどPHPの求人ばっかりだったと思います。で自分も無事に新人エンジニアとしてPHPから入門しました。\n\n仕事では確か[Zend](https://framework.zend.com/)ベースの独自フレームワークを使ってて、モダンな環境を知りたい！と思ってRailsインスパイアなCakePHPを使ってみたはず。\n\nControllerとかModelとか大量に作られるフォルダの意味が全然わからず、最初はかなり絶望したのがいい思い出です。。 この経験のおかげで後にRailsさわったときのハードルが多少下がった気がするので、まったく無駄というわけではなかった、と思いたい。\n\n### 💻ローカル環境\n\nマシンは買ったばかりのMacBookPro（Mid2010）を使っていました。 [メモリを増設](https://blog.notsobad.jp/entry/54791577771)したり[SSDに換装](https://blog.notsobad.jp/entry/82691328054)したりして、けっこう最近まで使ってた愛用マシンです。\n\nローカルサーバーは象のアイコンでおなじみの[MAMP](https://www.mamp.info/en/)を使ってましたね。便利だったよMAMP 🐘\n\nエディタは確か[miエディタ](https://www.mimikaki.net/)（旧名ミミカキエディット）を使ってたはず。\n\nその頃会社のマシンはWindowsで、[Eclipse](https://www.eclipse.org/)が推奨されてたけどどうしても好きになれず、途中からはもっぱら[サクラエディタ](https://sakura-editor.github.io/)を愛用してました。WindowsではXampp使ってましたね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsakura-editor.github.io%2F\" title=\"Sakura Editor\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://sakura-editor.github.io/\">sakura-editor.github.io</a></cite>\n\n### ⚙インフラ\n\nインフラはレンタルサーバーで、ロリポップの当時の最安プラン（月200円くらい？）を使っていました。 仕事の研修で使ってたので、同じ環境に揃えたんですね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flolipop.jp%2F\" title=\"ロリポップ！レンタルサーバー\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://lolipop.jp/\">lolipop.jp</a></cite>\n\nAWSとかもまだそこまで一般的じゃなくて、個人開発だとレンタルサーバーは割と一般的な選択肢だったような気がします。知らんけど。\n\nちなみにメディアで取り上げてもらったときはアクセスが集中して一瞬でサーバーが落ちたのですが、なんとこのときはまだ「サーバーが落ちる」という概念を知らなかったです（すごい）。\n\nロジックが間違ってないのに動かないのはおかしい！と思っているうちに波が去って、よくわからないうちに復帰してました。 わからないことがあったら詳しい人にちゃんと聞こう（大事）。\n\n### 📦デプロイ\n\n男は黙ってFTP、です。 毎回プロジェクトフォルダ全体を、レンタルサーバーのディレクトリにFTPで上書きアップしていました。\n\n後述するようにバージョン管理はまだ導入してなかったので、いま思うとよく無事にプロジェクトを維持してたなーという印象。 しかし実際何とかなってたので、まぁがんばれば何とかなるんだなという知見を得ました。\n\nFTPのクライアントソフトは黄色いアヒルの[Cyberduck](https://cyberduck.io/)を使ってました。\n\n### 🔗バージョン管理\n\nもちろんまだ導入していませんでした。 当時は世間的にもまだgitが今ほど普及してなくて、[Subversion](https://subversion.apache.org/)（SVN）の方が主流だったような。\n\nとぼけた亀がマスコットの[TortoiseSVN](https://tortoisesvn.net/)を仕事では使ってたので、バージョン管理の概念自体は知ってたはず。 まぁ趣味開発だしそこまで必要性を感じなかったんですかね。。なかなか男らしい決断です。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftortoisesvn.net%2F\" title=\"Home · TortoiseSVN\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://tortoisesvn.net/\">tortoisesvn.net</a></cite>\n\nバージョン管理がない上に当初はステージング環境もなかったので、デプロイして動かなかったときは悲惨です。 これはどう対応してたかというと、定期的にプロジェクトフォルダ全部コピーしてバックアップ取ってたような記憶があります。 本当によく管理できてたな。。\n\nでもいま振り返ると、余計な学習コストを増やさなかったのはいい判断だった可能性もワンチャンあるんじゃないかと🐶 すべてが初めてだったので、全部まともにやってたらとても完成しなかったはず。。\n\n### 🤖ステージング環境\n\nというわけで、何回か本番デプロイして動かない！という経験をしたあとに、ステージング環境を作るということを学びましたw\n\nレンタルサーバーでステージング用にディレクトリをもう1個切って、本番アップする前にそっちにアップするようにしたんですね。 これで随分デプロイに安心感が出たような気がします。\n\nしかし一部本番とパスが違って動かないところがあって、特定の処理はステージング用に書き換えたりしてたような記憶が。 本番とステージングのソースに乖離が出てたので、ステージングでは動いたのに本番では動かなかったり。ステージングとは。。\n\n### 🎨デザイン/CSS\n\n最後はデザインまわりの話。 この頃からデザインも完全にひとりでやっていて、覚えたてのPhotoshopで画面イメージ作ったりしてました（もう使い方わすれた。。）\n\n##### CSSフレームワーク\n\nCSSもフレームワークは使ってなくて、完全に手探りでフルスクラッチです。 ちょうどこの頃にBootstrapが登場して話題になり始めてたような気がするけど、このときはまだ使ってませんでした。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgetbootstrap.com%2F\" title=\"Bootstrap\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://getbootstrap.com/\">getbootstrap.com</a></cite>\n\n次のプロダクトで使ってみて、あまりの便利さに衝撃を受けたのを今でも覚えてます。 最近はずっと[Semantic UI](https://semantic-ui.com/)がお気に入りです。\n\n##### レスポンシブ対応\n\n当時はまだまだガラケーも残ってたけど、スマホも普及期に入ってたはず。（仕事でガラケーの公式サイトも大量に作ってたな。。）\n\n仕事ではPCとスマホで完全にviewを分けることが多かったけど、ぼちぼちレスポンシブデザインなんてことも言われ始めてた気がします。\n\nが、booklovesmusicは完全にPCオンリー。スマホ対応を後回しにして、その「後」が永遠に来なかったパターンですね。 あるある。\n\n仕事ではもちろんスマホ対応もしてたのですが、この頃はまだ全体的にPCファーストで作って、それをスマホ対応するっていう空気感だったような気がします。今では完全に逆のことが多いですね。\n\n##### アイコンとか\n\nあと個人的に今と大きく違うのは、ちょっとしたアイコンとかもこの頃は全部Photoshopで自作してました。えらい。まぁ他に選択肢を知らなかったんですが。。 今だと良くも悪くもfontawesomeとかで済ましちゃってますね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffontawesome.com%2F\" title=\"Font Awesome 5\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://fontawesome.com/\">fontawesome.com</a></cite>\n\n自作のアイコンが全部微妙にいびつで歪んでるのが、いま見ると非常にほほえましいw\n\n* * *\n\n### まとめ\n\nという感じで、いま振り返っても何で作りきれたのか不思議なくらい、初めて尽くしの開発でした。しかし楽しかった…！\n\nさすがに7年もやってると当時よりは技術も上がって（そしてそれ以上に環境がよくなって）作りたいものを思い通りにつくれるようになってきました。 でも一方で、中途半端に技術と知識がついてリリースまでの動きが遅くなってるのも年々感じます。\n\nバージョン管理もしてないのにライブラリの中身を手動で書き換えて強引に動かしていたあの頃の情熱を思い出して、来年は個人開発ももっとバリバリやっていきたい所存です。  \nまぁそのライブラリのバージョンが上がった瞬間に追従できなくて死んだので、やっぱり最低限の知識はあった方がいいと思いますけど😇\n\n* * *\n\nちなみに、booklovesmusicはこれでサービス終了しますが、もしコンセプトに共感してリメイクしたいという方がいたらぜひ[@kame\\_f\\_no7](https://twitter.com/kame_f_no7)まで連絡もらえるとうれしいです。\n\nそこまで好きなら自分で作れよって感じなんですが、残念ながらぼくは本読むときに音楽聞かないんですよね（なんで作ったw）\n\n[個人開発はドッグフーディングが一番](https://blog.notsobad.jp/entry/2017/12/05/101957)なので、ぜひ本と音楽が好きな方に引き継いでもらえるとうれしいです。\n\nおしまい。","date":1543874400000,"image":"https://storage.googleapis.com/blog-notsobad/images/20181119185903.png","tag":["技術系","ポエム","個人開発論"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"60BpGYN2APP9nXbVSCmS6m","type":"Entry","createdAt":"2020-05-27T09:06:45.385Z","updatedAt":"2020-06-13T04:00:47.712Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Riot.jsでSPAにしたらGoogleにインデックスされなくなったので、FirebaseのFunctionsでmetaタグだけレンダリングした話","slug":"2018/04/03/235004","excerpt":"FJUG#3でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase-community.connpass.com%2Fevent%2F80526%2F\" title=\"Firebase Japan User Group / meetup / 3 (2018/04/02 19:00〜)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase-community.connpass.com/event/80526/\">firebase-community.connpass.com</a></cite>\n\n前回#2に続いての参加で、今回は思い切ってLT枠に突っ込ませてもらいました。 150人の前でのLTは初めてでしたが、緊張で死ぬかと思いました。\n\n発表したスライドにちょっとした説明やその後の検証結果を追記して、ブログに残しておこうと思います。","content":"FJUG#3でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase-community.connpass.com%2Fevent%2F80526%2F\" title=\"Firebase Japan User Group / meetup / 3 (2018/04/02 19:00〜)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase-community.connpass.com/event/80526/\">firebase-community.connpass.com</a></cite>\n\n前回#2に続いての参加で、今回は思い切ってLT枠に突っ込ませてもらいました。 150人の前でのLTは初めてでしたが、緊張で死ぬかと思いました。\n\n発表したスライドにちょっとした説明やその後の検証結果を追記して、ブログに残しておこうと思います。* * *\n\nLT内容\n----\n\n[https://speakerdeck.com/tomomichi/ogpdui-ying-moukoreteiinsiyanaitesuka2018zan-ding-ban](https://speakerdeck.com/tomomichi/ogpdui-ying-moukoreteiinsiyanaitesuka2018zan-ding-ban)\n\n3行で要約\n-----\n\n*   Riot.js/Firebaseでサービスをリニューアルしたら、Googleにインデックスされなくなって困りました\n*   SSRとか大変なのは避けたかったので、Functionsでmetaタグだけ差し替えたんだけどいいですよね？\n*   それだけだとクロールされないので、Functionsで超お手軽にRSSフィードとsitemapを配信する方法も試してみましたよ。\n\n一言でいうと、Functions最高ー。\n\n背景的な話\n-----\n\nこのコンテンツは、こちらの記事の追記のような位置付けです。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F03%2F31%2F132507\" title=\"3年間運用してきたWebサービスを「Rails x Heroku」から「Riot.js x Firebase」に移行した話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/03/31/132507\">blog.notsobad.jp</a></cite>\n\nサイトリニューアルで出てきたSEO問題を、できるだけ楽して解決できないかとがんばった記録になっております。\n\nエクスキューズ\n-------\n\nこれでいいんじゃないですかとか適当なこと言ってますが、会社でこんなことしてたら怒られるかもしれないので気をつけてください。\n\n> 「SSRまではいらないけど、ある程度metaを動的にコントロールしたい」っていう欲求は結構理解できる。特に趣味プロでバックにfirebase 、みたいなシチュと割と相性良さそうなイメージだ [#fjug](https://twitter.com/hashtag/fjug?src=hash&ref_src=twsrc%5Etfw)\n> \n> — Yosuke Kurami (@Quramy) [2018年4月2日](https://twitter.com/Quramy/status/980772868182065152?ref_src=twsrc%5Etfw)\n\n温度感としては、@Quramyさんが書いてくださってるのがほんとにその通りって感じじゃないかと。\n\nスライドにも書いてますが、とはいえGoogleBotにちゃんと認識されてるならそもそもこんなことしたくなかったわけで。。\n\nあくまでインデックスされなくて困ってて、でもSSRまでしたくなくて、っていうひとつの事例としてお楽しみください。 （パフォーマンス改善のためにSSR、とかって文脈ではない）\n\n同じようなシチュエーションの人の助けになればうれしいです。\n\n* * *\n\n以下、やったこと３つをそれぞれ少しだけ追加説明していきます。\n\n① Functionsでmetaタグだけレンダリング\n--------------------------\n\n要するに、SPAでエンドポイントになるindex.htmlをそのまま返すんじゃなくて、functionsをかませてmetaタグだけ書き換えてから返すという、SMR（Serverside Metatag Rendering）です。聞いたことないけど。\n\nけっこう探しても事例がなくて不安だったんですが、Lambdaでやってるという話を聞くと安心感があります。\n\n> 同じようなコンテキストでAWS Lambdaで動的にmetaレンダリングしてます、みたいな話を以前に聞いたことあるし、function 利用してmetaもそんなに悪手では無い気と思ってる [#fjug](https://twitter.com/hashtag/fjug?src=hash&ref_src=twsrc%5Etfw)\n> \n> — Yosuke Kurami (@Quramy) [2018年4月2日](https://twitter.com/Quramy/status/980772075513176064?ref_src=twsrc%5Etfw)\n\n全体的に@Quramyさんのコメントに救われてる。。\n\nこのやり方で懸念になるのはFunctionsの使用量とパフォーマンスなわけですが、FunctionsのレスポンスはCDNにキャッシュできるというのが、意外と知られていなかったりしますよね（ぼくが知らなかっただけですがw）\n\n[Cloud Functions による動的コンテンツの配信  |  Firebase](https://firebase.google.com/docs/hosting/functions?hl=ja#managing_cache_behavior)\n\nCDNから返してくれればFunctionsはトリガーされずに済むので、アクセスが増えてもそこまで使用量は増えない、はず。\n\nとはいえまだ実運用で大量のアクセスさばいて大丈夫でした、という経験があるわけではないので、ご利用は自己責任でお願いします。 blazeプランは料金上限を設定できないって、結構こわいですね。\n\n* * *\n\n② Functionsでお手軽RSSフィード配信\n------------------------\n\nmetaタグレンダリングでbotに認識されるようになりましたが、クロールしてもらえないと意味がありません。 というわけでRSSフィードとsitemapを極小労力で用意してみます。\n\nまずはRSSフィードですが、これもFunctionsを使って、/feedにアクセスが来たらfirestoreから最新のデータを取ってXMLで返すようにしました。\n\n簡単すぎて、node-rssが便利だったことくらいしか特に言うことがない。。\n\nしかし猛烈にお手軽なので、とりあえずやっといて損はないんじゃないでしょうか。 これこそ更新は1日数回でいいと思うので、長めにキャッシュして節約したいところです。\n\n* * *\n\n③ スプレッドシートでお手軽sitemap配信\n-----------------------\n\n最後にsitemapの作成。たぶん過去最高に頭わるそうなsitemapのハックです。\n\n![f:id:o_tomomichi:20180403184508p:plain](https://storage.googleapis.com/blog-notsobad/images/20180403184508.png \"f:id:o_tomomichi:20180403184508p:plain\")\n\nということは、スプレッドシートにURL一覧作ってCSV形式で公開すると、それがvalidなsitemapのURLになってしまうと。\n\nさらに更新は、さっきのRSSのフィード更新をトリガーに、IFTTTでシートに自動追記。 ついにコードを1行も書くことすらなく、自動更新されるsitemapをお手軽に作ることができました。\n\nsitemapの管理って地味にめんどくさいので、ミニマムでやるなら意外とおすすめです。 機会があればぜひ試してみてください。\n\n* * *\n\nまとめ\n---\n\nという感じでLTをしてきたのですが、調べて実装終えたのが発表ぎりぎりだったので、結果の検証までできてませんでした。\n\n実装から数日経ってどうなったかというと、、\n\n![f:id:o_tomomichi:20180403185752p:plain](https://storage.googleapis.com/blog-notsobad/images/20180403185752.png \"f:id:o_tomomichi:20180403185752p:plain\")\n\n![f:id:o_tomomichi:20180403185803p:plain](https://storage.googleapis.com/blog-notsobad/images/20180403185803.png \"f:id:o_tomomichi:20180403185803p:plain\")\n\nいい感じ。\n\nもちろんfunctionsも無料枠で収まるペースです。よかったよかった。","date":1522767004000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180403035841.png","tag":["技術系","Firebase","THE TOURNAMENT","Riot.js"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"5if6MqMHq4i7gglLyZ6qpK","type":"Entry","createdAt":"2020-05-27T09:06:47.317Z","updatedAt":"2020-06-13T04:00:50.916Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"3年間運用してきたWebサービスを「Rails x Heroku」から「Riot.js x Firebase」に移行した話","slug":"2018/03/31/132507","excerpt":"![f:id:o_tomomichi:20180312145525p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312145525.png \"f:id:o_tomomichi:20180312145525p:plain\")\n\nWeb上で簡単にきれいなトーナメント表が作れる、「THE TOURNAMENT」という超絶地味なサービスを運営しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-tournament.jp%2F\" title=\"THE TOURNAMENT | 簡単・便利な無料のトーナメント表作成サービス\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-tournament.jp/\">the-tournament.jp</a></cite>\n\n最初に作ったのが2014年だったので、気づけばもう運営4年目。\n\nずっと「Rails×Heroku」で運用してきたのですが、ちょうど先日サービスを全面リニューアルして、「Riot.js×Firebase」に移行しました。\n\nそんなお引っ越しの記録と振り返ってみての感想です。\n\n（2018年8月追記）\n\nFirebaseは恐ろしい勢いで改善し続けているので、この記事に書いてあるつらみもどんどん解消されつつあります。 ますますおすすめなのでぜひ使ってみてください。\n\n[The Firebase Blog: More Cloud Firestore Improvements!](https://firebase.googleblog.com/2018/08/more-cloud-firestore-improvements.html)\n\n（追記おわり）","content":"![f:id:o_tomomichi:20180312145525p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312145525.png \"f:id:o_tomomichi:20180312145525p:plain\")\n\nWeb上で簡単にきれいなトーナメント表が作れる、「THE TOURNAMENT」という超絶地味なサービスを運営しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-tournament.jp%2F\" title=\"THE TOURNAMENT | 簡単・便利な無料のトーナメント表作成サービス\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-tournament.jp/\">the-tournament.jp</a></cite>\n\n最初に作ったのが2014年だったので、気づけばもう運営4年目。\n\nずっと「Rails×Heroku」で運用してきたのですが、ちょうど先日サービスを全面リニューアルして、「Riot.js×Firebase」に移行しました。\n\nそんなお引っ越しの記録と振り返ってみての感想です。\n\n（2018年8月追記）\n\nFirebaseは恐ろしい勢いで改善し続けているので、この記事に書いてあるつらみもどんどん解消されつつあります。 ますますおすすめなのでぜひ使ってみてください。\n\n[The Firebase Blog: More Cloud Firestore Improvements!](https://firebase.googleblog.com/2018/08/more-cloud-firestore-improvements.html)\n\n（追記おわり）* * *\n\n🤔なんで移行したの？\n-----------\n\n大前提として、HerokuとRailsは今でも大好きですw\n\nじゃあなんで移行したんだよって話ですが、理由は大きく以下の２つでした。\n\n*   Herokuを無料で使い続ける限界が近づいていた\n*   トーナメント作成をjsベースでインタラクティブにしたかった\n\n前にこんなLTもしましたが、トーナメントは相当アクセスが増えても無料でしのげる仕組みにはしていました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F02%2F04%2F170844\" title=\"Herokuの無料プランで月間100万PVをさばく（さばかない）話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/02/04/170844\">blog.notsobad.jp</a></cite>\n\nとはいえおかげさまで作成側の負荷も増えてきていたのと、DBも無料だと1万レコード制限があって、そろそろこれも限界が近づいていました。\n\nまた、リニューアルの大きな目的の1つが、jsでインタラクティブにトーナメント表を編集できるようにすることでした。\n\n![f:id:o_tomomichi:20180331115841p:plain](https://storage.googleapis.com/blog-notsobad/images/20180331115841.png \"f:id:o_tomomichi:20180331115841p:plain\")\n\nWebpackerでjsフレームワークの導入に挑戦するという選択肢もあったのですが、まぁ率直に「これRailsじゃなくてよくね？」と気づいてしまったのは否定できません。\n\nというか、こういうフロント中心のサービスでバックエンドも楽したいって思ったときに、Firebaseがどんぴしゃすぎるんですよね。。 [別のプロダクト](https://the-timeline.jp/)で1年くらいFirebaseを運用していたこともあり、もうこれでいいんじゃないのーと思えたのも移行のきっかけです。\n\n1年前の時点でフロントエンドのフレームワークはまったく経験がなかったので、一番シンプルで学習コストが低そうなRiot.jsをチョイスしてました。いまならVue.jsにしてたかもですが、Riot.jsもこれくらいの規模なら全然問題なく、シンプルでよい感じです。\n\n* * *\n\n😇 移行してみてのうれしみ\n--------------\n\n### 無料枠が大きすぎ\n\nFirestoreもHostingもFunctionsも、いまのところ無料枠で収まりそうです。うれしい。\n\nしかもつい先日、従量課金型のBlazeプランにも無料のSparkプランとほぼ同じ無料枠が割り当てられるようになりました。 （いままではBlazeを選択したら最初の1バイトから課金対象になってた）\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.googleblog.com%2F2018%2F03%2Fadding-free-usage-to-blaze-pricing-plan.html\" title=\"Adding free usage to Blaze pricing plan\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase.googleblog.com/2018/03/adding-free-usage-to-blaze-pricing-plan.html\">firebase.googleblog.com</a></cite>\n\nこれなら基本無料で運用できて、急なアクセス増のときだけ従量課金でさばいてくれるので、かなりよさそうです。\n\nただBlazeは上限設定ができないのが怖くてまだ移行してないけど。。\n\n### ユーザー認証が簡単すぎ\n\nFirebaseのAuthenticationは、めちゃくちゃよくできています。\n\nデフォルトで主要SNSログインの仕組みも用意してくれてるので、各SNS側でアプリだけ作って指示通り設定すれば、すぐにログインの仕組みができてしまいました。\n\n![f:id:o_tomomichi:20180312141940p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312141940.png \"f:id:o_tomomichi:20180312141940p:plain\")\n\nさらに最近のアップデートでパスワード不要のメールログインの仕組みが公式に実装されました。神！\n\n[Authenticate with Firebase Using Email Link in JavaScript  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth)\n\n自前で同じ仕組みを実装してたので、早く乗り換えねば。\n\n### Functionsが便利すぎ\n\nこれはほんとに便利。\n\nうちではデータの更新を検知して、なんちゃってSSRみたいなことをして静的HTMLを出力するという処理を走らせています。\n\n![f:id:o_tomomichi:20180312142426p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312142426.png \"f:id:o_tomomichi:20180312142426p:plain\")\n\nいままではHerokuのSchedulerアドオンでバッチ処理を走らせて同じことをしていました。 ただこれがFree Dynoのメモリを圧迫していて、処理が安定しなくなっていた原因でもありました。\n\nFunctionsは無料プランでも結構なキャパがあるので、頼もしいです。すごい。\n\n* * *\n\n💩 移行してみてのつらみ\n-------------\n\n一方でFirebaseに移行して感じているつらみと不安。\n\n### カジュアルに障害が起きる\n\nベータのサービスが多いせいもありますが、よく落ちます。\n\n自分が使っている範囲だと特にHostingとFunctionsがやばい。カジュアルに落ちます。\n\nインフラ側で落ちちゃうとどうしようもなくて結構困ってしまうのですが、DB（Firestore）が無事でHostingが落ちてるだけなら、最悪Storageにでも置きなおしてドメイン振ればいけるはず。\n\n一方でFirestoreが落ちると、けっこうどうしようもないですね。どうしよう。 今のところFirestoreはほぼ障害ないのが救いですが。。（レスポンスがめっちゃ遅くなるときはある）\n\n### 管理画面が貧弱\n\nサービスを運営していると、データをちょっと修正したいときとかあるじゃないですか。 Firebaseの公式管理画面（コンソール）だと、これがものすごく大変です。 データの一覧性もないし、検索性はほぼないし、クエリ投げたりもできないし。。\n\n### データバックアップができない\n\nできません。どうしたらいいんですか（切実）。\n\nRealtimeDatabaseは有料プランならバックアップオプションが用意されてたんですが、Firestoreは有料版でもそもそも存在しない。。 一応npmモジュールでバックアップ取れるやつがあるので触ってみてますが、もうちょっと公式でサポートしてほしい。\n\n### 初回表示が遅くなった\n\nこれはfirebaseの問題ではなく、SPA化したことの弊害ですね。 何も考えずにSPA化すると、最初の読み込みが重くなりがち。一回読み込めば中の遷移はさくさくなんですけどね。\n\nキャッシュがない状態でもユーザービリティを損なうほど遅いわけじゃないので、いったん後回しにしてます。 ただPageSpeedInsightとか Lighthouseとかでauditしてみると、めっちゃ怒られる。。\n\nトップページから入ってきて中に進むユーザーが多いので、将来的にはトップページを静的にしてAMP化、後続のアプリ部分をPWA化しておいて、AMPアクセス時にpreloadするような仕組み（PWAMP！）にすれば爆速化できるんじゃないかと思ってます。が、PWAこわくてまだ手を出せてない。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.ampproject.org%2Fdocs%2Fintegration%2Fpwa-amp%23amp-as-entry-point-into-your-pwa\" title=\"Combine AMP with Progressive Web Apps – AMP\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.ampproject.org/docs/integration/pwa-amp#amp-as-entry-point-into-your-pwa\">www.ampproject.org</a></cite>\n\nMobileFirstIndexも始まったし、そろそろやらねばですね。がんばる。。\n\n### SEOも弱くなった\n\nこれもFirebaseは関係なく、よく言われるSPA化の弊害に見事にはまってしまいました。\n\n*   Googleにインデックスされず、SEOに弱くなった\n*   SNSシェア時にOGPが反映されない\n\nどちらもbotがアクセスしてきたときに、動的に変更してるmetaタグを読めず、エンドポイントのindex.htmlに書いてあるデフォルトのmetaタグを読んじゃってることが原因です。\n\nこれについては、特にSEO/OGPが必要になるコンテンツページに絞って、Functionsで動的にmetaタグを書き換えて配信することで一応対応できました。\n\nまたbotがページ内のリンクたどれてるかもあやしいので、sitemapとRSSフィードを配信してクロールしやすくもしています。\n\nこの辺の詳細はまた別で整理してみようかと。\n\n（2018年4月3日追記）\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F04%2F03%2F235004\" title=\"Riot.jsでSPAにしたらGoogleにインデックスされなくなったので、FirebaseのFunctionsでmetaタグだけレンダリングした話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/04/03/235004\">blog.notsobad.jp</a></cite>\n\n書きました。\n\n* * *\n\nまとめ\n---\n\nなぜかうれしみよりつらみの方が多くなってしまった。なぜだ。。 しかし実際にリニューアルは不可避でしたし、いまのところ非常にうまく機能してると思います。\n\nまたぼくが解決策を知らないだけの可能性もあるので、もしお気づきのところあれば指摘もらえるとうれしいです。 ベータ版を抜ければ解決しそうな問題も多いので、早く公式で色々対応してくれるといいですね。\n\n信じてもらえないかもしれないけど、Firebaseは本当におすすめですよ。 みんな早くおいで！\n\nおしまい。","date":1522470307000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180312145525.png","tag":["技術系","THE TOURNAMENT","Firebase","Heroku","Riot.js"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"3mmzVCUR3m6VkOu9qUUamt","type":"Entry","createdAt":"2020-05-27T09:06:47.000Z","updatedAt":"2020-06-13T04:00:54.243Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"個人開発のWebサービスにとりあえず導入しておきたい無料の便利サービスまとめ","slug":"2018/03/10/223400","excerpt":"個人開発はリソースが限られるので、いかにサービスのコアなところに集中するかが勝負です。\n\nとはいえサービスのクオリティを上げるためには、色々コア以外の部分も充実させたいところ。 そんなときに簡単に使えて便利なサービスを集めてみました。\n\n自分が運営しているサービスで実際に導入して、本当によかったものだけの選り抜きリストです。 どれも無料プランでの利用が可能なので、ぜひ試してみて下さい。","content":"個人開発はリソースが限られるので、いかにサービスのコアなところに集中するかが勝負です。\n\nとはいえサービスのクオリティを上げるためには、色々コア以外の部分も充実させたいところ。 そんなときに簡単に使えて便利なサービスを集めてみました。\n\n自分が運営しているサービスで実際に導入して、本当によかったものだけの選り抜きリストです。 どれも無料プランでの利用が可能なので、ぜひ試してみて下さい。* * *\n\nチャットサポート / Small Chat\n=====================\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsmall.chat%2F\" title=\"Smallchat\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://small.chat/\">small.chat</a></cite>\n\n個人開発こそユーザーサポートはがんばりどころ。\n\nユーザーの生の要望や不満を聞けるので、問い合わせ対応は本当に学びが多いです。\n\nGoogleフォームやメールでの問い合わせ窓口も用意していたのですが、チャットだとカジュアルに質問できるので、明らかに拾える意見が多くなりました。\n\n類似サービスは色々出ていますが、SmallChatはサイトに設置したチャットをSlackと連携させてくれて、やりとりが全部Slackで完結するので超便利です。\n\n普段自分が見てるところに通知が来ないと、見落としてしまいますからね。。\n\n* * *\n\n多言語翻訳 / wovn.io\n===============\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwovn.io%2Fja%2F\" title=\"WOVN.io\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://wovn.io/ja/\">wovn.io</a></cite>\n\n特にうちみたいな言語に依存しないツール系サービスは、最初から海外展開も視野に入れたいところ。\n\nRailsなどでがっつりi18n対応するのがもちろん王道ですが、ページ数も少ないときにさくっと翻訳を提供したければ、wovn.ioがものすごく便利です。\n\n少し前に料金改定があり、無料プランでも動的ページ対応など、かなり使える範囲が増えました。\n\n自動で機械翻訳もしてくれるので、とりあえずお任せで翻訳しておいて、余裕ができてからプロに頼んで翻訳の精度を上げにいく、という使い方ができるのが超絶便利。\n\n* * *\n\n使い方ガイド（FAQ） / Tayori\n====================\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftayori.com%2F\" title=\"Tayori - 無料のカスタマーサポートツール\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://tayori.com/\">tayori.com</a></cite>\n\n使い方ガイドをいい感じに作るのは大変だし、更新するたびにデプロイするのもめんどくさい。\n\nそんなときはTayoriです。PRTimesさんが運営しています。\n\n多機能でチャットやアンケート機能もありますが、チャットはSlackに投げてくれるほうがうれしいので前述のSmallChatを使っています。\n\nうちではFAQサービスを使い方ガイドとして活用しています。自分が運営しているトーナメント用に作ったのはこんな感じ。\n\n[THE TOURNAMENT使い方ガイド](https://tayori.com/faq/8ffbdba0a70dcacc24ed64550dfa39a4332ac44b)\n\n* * *\n\n開発ロードマップ / Trello\n=================\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftrello.com%2F\" title=\"Trello\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://trello.com/\">trello.com</a></cite>\n\n今後の開発ロードマップをTrelloで作って公開しようという話。\n\nこれは前に記事書いたので詳しくはそちらをどうぞ。便利です。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2017%2F09%2F29%2F104504\" title=\"個人開発のWebサービスで、Trelloを使っていい感じに開発ロードマップを公開した話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2017/09/29/104504\">blog.notsobad.jp</a></cite>\n\n* * *\n\nセッション録画 / Smart Look\n====================\n\n[https://www.smartlook.com/](https://www.smartlook.com/)\n\nこれは何かというと、サイトを訪れたユーザーがどんな動きをしているか、動画で再現してくれるサービスです。\n\n（直接録画しているわけではなく、スクロールやクリックイベントを取得して、後からそれを再現しているイメージ）\n\n特にUIを検討するときに、離脱の数字だけじゃなくて実際のユーザーの動きを見られるのはとても参考になります。\n\nアプリだと「Repro」が有名ですが、Web用にはあんまり日本でこの手のサービスがない感じ。\n\n海外でも無料版は利用枠がすごい少なかったりする中で、このSmartLookは十分に使えていい感じです。\n\nこのジャンルのサービスを探すのにだいぶ苦労したのですが、「session replay」「session recording」とかで検索するとよさそうです。ご参考までに。\n\n* * *\n\nステータスページ / StatusKit\n====================\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstatuskit.com%2F\" title=\"StatusKit - Everything you need to create your awesome status page\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://statuskit.com/\">statuskit.com</a></cite>\n\nサービスの障害情報を表示するページ。\n\nこの分野だとstatuspage.ioがメジャーですが、残念ながら有料プランのみ。 無料プランがある中でデザインもきれい目なstatus kitを使っています。\n\nまぁせっかくステータスページ作っても、一般ユーザーが見ることはまずないです。 しかも自サイトのフッターとかにリンク置くことが多いけど、サイトが落ちてる時はそもそもそれが見れないっていう。。\n\nじゃあ何でこれ用意するのかっていうと、過去の障害情報もすべてオープンにして信頼感を出すっていうのと、あとはAPI提供を始めた時の開発者向けにっていうくらいかなーと思っています。\n\n自分のサービスで作成したのはこんな感じ。まだ作ったところなのでこれから様子見です。\n\n[THE TOURNAMENTステータスページ](https://notsobad.statuskit.com/)\n\n* * *\n\nまとめ\n===\n\nこれが全部無料で利用できるなんて、本当に便利な時代です。その分自分もWebサービスで稼ぐのが大変なわけですが。。\n\n紹介したものはどれも便利なんですが、チャット・翻訳・セッション録画は、サイトでjsがゴリゴリ動くため、全部入れるとパフォーマンス的にしんどいかもしれません。\n\n録画はUI改善フェーズとかにピンポイントで使って、あとはチャットか翻訳をフェーズに合わせて使い分ける感じがいいのかなーと思ったり。\n\nちなみにこういうツール系のサービスは、よくまさとらんさんがまとめてくれていたりするので、気になる人はフォローされるとよいと思います。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftwitter.com%2F0310lan\" title=\"まさとらん (@0310lan) | Twitter\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://twitter.com/0310lan\">twitter.com</a></cite>\n\nおしまい。","date":1520688840000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180310214450.png","tag":["個人開発論","技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"25Tmc08939VifF0clDp4wH","type":"Entry","createdAt":"2020-05-27T09:06:51.307Z","updatedAt":"2020-06-13T04:01:09.106Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Herokuの無料プランで月間100万PVをさばく（さばかない）話","slug":"2018/02/04/170844","excerpt":"![f:id:o_tomomichi:20180204152944p:plain](https://storage.googleapis.com/blog-notsobad/images/20180204152944.png \"f:id:o_tomomichi:20180204152944p:plain\")\n\n「Heroku Meetup #19 Heroku Trust!」でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fherokujp.doorkeeper.jp%2Fevents%2F69249\" title=\"Heroku Meetup #19 Heroku Trust!\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://herokujp.doorkeeper.jp/events/69249\">herokujp.doorkeeper.jp</a></cite>\n\nせっかくなので、LTのスライドを一部修正して掲載しておきます。\n\nHeroku Meetupはずっと行きたかったけど今まで都合がつかず、初参加できてよかったです。\n\nピザごちそうさまでした🍕","content":"![f:id:o_tomomichi:20180204152944p:plain](https://storage.googleapis.com/blog-notsobad/images/20180204152944.png \"f:id:o_tomomichi:20180204152944p:plain\")\n\n「Heroku Meetup #19 Heroku Trust!」でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fherokujp.doorkeeper.jp%2Fevents%2F69249\" title=\"Heroku Meetup #19 Heroku Trust!\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://herokujp.doorkeeper.jp/events/69249\">herokujp.doorkeeper.jp</a></cite>\n\nせっかくなので、LTのスライドを一部修正して掲載しておきます。\n\nHeroku Meetupはずっと行きたかったけど今まで都合がつかず、初参加できてよかったです。\n\nピザごちそうさまでした🍕LT内容\n----\n\nというわけで発表したスライドはこちら。\n\n[https://speakerdeck.com/tomomichi/herokufalsewu-liao-purandeyue-jian-100mo-pvwosabaku-sabakanai-hua](https://speakerdeck.com/tomomichi/herokufalsewu-liao-purandeyue-jian-100mo-pvwosabaku-sabakanai-hua)\n\n3行で要約\n-----\n\n*   それなりにアクセスが多いサイトでも、場合によってはHerokuのFreeDynoだけでさばけるよ\n*   Herokuは更新系に集中して、アクセスが多い閲覧系のコンテンツはGoogleCloudStorage(GCS)とかS3に置いちゃえばいいんだよ\n*   最近だとFastlyとか使うのがいいらしいけど、GCS/S3も安くて手軽にできるからおすすめだよ\n\n補足とか言い訳とか\n---------\n\nちょうど発表の数日前に、似た内容の話がはてぶでバズってました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.mu%2Fkonpyu%2Fn%2Fnb424a9a2ea8a\" title=\"実はHerokuで充分なのでは問題｜こんぴゅ｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://note.mu/konpyu/n/nb424a9a2ea8a\">note.mu</a></cite>\n\nまたさらに前に話題になった[dev.to](https://dev.to/)もHeroku/Railsであの爆速を実現してて、その速さのコアな部分はFastlyによるCDN配信だったと理解しています。\n\n今回発表した内容も考え方はほぼ同じなんですが、Fastlyとかを使うんじゃなくてGCS使ってるところが違う点です。\n\nまたメリット/デメリットの比較に関して、今回は配信速度の追求よりも、大量のアクセスをちゃんとさばくというところに重点を置いているため、その点もご了承ください。\n\n個人的にはdev.toの爆速っぷりに驚いた一人なので、今後Fastly（もしくは類似サービス）を使うのはもっと主流になっていくんじゃないかと思っています。\n\nただ現時点でまだCDNでの動的コンテンツキャッシュをよく把握できておらず、自分の力量を考えると本番で試すのは怖いなーという感じです。\n\nあと金額的にもFastlyは多少高いのかなーと思っていて、個人のWebサービスなんかで使うにはまだハードルが高いという印象です。\n\n※そもそもFastly使ったことないので、違うよっていうご意見あればぜひ教えてほしいです。\n\nその点GCS方式は、ベストプラクティスではないかもしれないけど、わたし程度のエンジニアレベルで3年運用してて、お安くてトラブルもなく、今のところ超快適です。\n\nなので少なくとも現時点で、お手軽に試す分にはおすすめできるんじゃないかなーという話でした。\n\nちなみに、LTのあと懇親会で色んな方に話しかけてもらったのですが、ちゃんとした開発会社さんからS3で似た仕組みを運用してるよ、という話を聞きました。\n\n4年前に試行錯誤してこのやり方にたどり着いたのですが、まぁ間違ってなかったんだなーと思えてうれしい限りです。\n\nまとめというか、余談\n----------\n\nせっかくLTまでしたんですが、THE TOURNAMENTは現在、Rails/HerokuからFirebase/Riot.jsに絶賛リニューアル中です。\n\nしかしFirebaseにインフラが変わっても、このGCS方式の仕組み自体は続けています。\n\nいままでHTML出力は、Herokuのschedulerアドオンでバッチ処理していたのですが、CloudFunctionでFirestoreの更新をトリガーに動かすように変えたくらいですね。CloudFunction超便利。\n\n安定稼働してきたらFirebase版のやり方もまとめてみたいと思います。\n\n### 余談の余談\n\nHerokuからの移行を決めたのには色々理由があるのですが、Herokuがだめだからというわけではなく、作ってるサービスとの相性が大きいです。\n\nトーナメントだとデータ構造がほぼjsonで、フロントでうにょうにょ動かすのがメインになることを考えたときに、Heroku/Railsである必然性がなくてですね。。（気付くのが遅い）\n\n個人的にいまでもHerokuは大好きです。\n\n現状Herokuの無料プランでずっと動かせるのは1アプリだけなので、トーナメントの枠が空いたら、4年ぶりにHerokuで新しいアプリを動かせるのが楽しみだったりします。\n\nおしまい。\n\n##### （2018年4月1日追記）\n\nFirebaseへのお引っ越しが完了したので記事にまとめました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F03%2F31%2F132507\" title=\"3年間運用してきたWebサービスを「Rails x Heroku」から「Riot.js x Firebase」に移行した話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/03/31/132507\">blog.notsobad.jp</a></cite>\n\nさようなら、Heroku。また会う日まで。。","date":1517731724000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180204152944.png","tag":["個人開発論","技術系","Heroku"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"46z822fnzHVIfwiq0vjj1E","type":"Entry","createdAt":"2020-05-27T09:06:55.352Z","updatedAt":"2020-06-13T04:01:22.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"日本語で国名を選択できて、値はISOの国コードになってるいい感じのセレクトボックスを5分でお手軽に用意する","slug":"2017/12/04/151158","excerpt":"国を選択させたいこと、ありますよね。\n\nセレクトボックスでは国名を表示させたいけど、値はISOの2桁国コードで保存したいってやつ。\n\nもちろん国名は日本語で。\n\nそんな状況がまた来たので、お手軽に5分で作れる方法を考えてみました。よければご活用ください。","content":"国を選択させたいこと、ありますよね。\n\nセレクトボックスでは国名を表示させたいけど、値はISOの2桁国コードで保存したいってやつ。\n\nもちろん国名は日本語で。\n\nそんな状況がまた来たので、お手軽に5分で作れる方法を考えてみました。よければご活用ください。経緯と方針\n-----\n\nこれ昔やってたときはRailsでgem入れたりしてたのです。\n\nしかし今回はRailsを離れて素のhtml/jsで書いてたので、どうしたもんかなーと思いまして。\n\n普通にライブラリとか探してたのですが、なかなかよさそうなのがない。\n\nで探しているとこんな記事を見つけました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fmiz2403.com%2Fcountries-list%2F\" title=\"問い合わせページなどで国名をドロップダウンで選択する為のselectタグリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://miz2403.com/countries-list/\">miz2403.com</a></cite>\n\nselectとoptionに国がずらっと入ってるやつが、テキストでコピペできるように用意されてます。\n\nなるほど、よく考えればこれで十分じゃないかと。\n\n国名なんてそうそうアップデートされるものでもないので、メンテナンス性はそんなに考慮しなくていいし。\n\n逆にライブラリとか使わない方がメンテナンスフリーで運用にはよさそうかもしれない。\n\nというわけで、ライブラリに頼らず生のHTML出力する方向ですすめてみます。\n\nさっきのリンクだと英語版しかないので、これの日本語版を用意するのがゴールです。\n\nやりかた\n----\n\nとにかく一回リストを作ってしまえばいいだけなので、いかに省力でいけるかがカギです。\n\n### Wikiの一覧ページをコピってスプレッドシードに貼り付ける\n\nまずは日本語の国名とISOコードが一覧になった元データを探します。\n\nWikipediaにいい感じのページがありました。\n\n[ISO 3166-1 - Wikipedia](https://ja.wikipedia.org/wiki/ISO_3166-1)\n\nこのテーブルの部分をまるっと選択してコピーして、スプレッドシートに貼り付けます。\n\nもちろんお好みでエクセルを使ってもかまいません。\n\n### CONCATENATE関数でoptionタグを生成\n\n次にこのデータから大量のoptionタグを生成します。\n\nやることはめちゃシンプルで、スプレッドシードのconcatenate（文字列結合）関数を使って、いい感じにタグを作るだけです。\n\nこんな感じ。\n\n![f:id:o_tomomichi:20171204144804p:plain](https://storage.googleapis.com/blog-notsobad/images/20171204144804.png \"f:id:o_tomomichi:20171204144804p:plain\")\n\nメインの部分は、\n\n`=CONCATENATE(\"<option value='\",LOWER(E3),\"'>\",A3,\"</option>\")`\n\nで、E列がISO2桁のコード、A列が日本語の国名ですね。\n\n今回はISOを小文字で使いたかったのでLOWER関数をかませてます。\n\nこの時点でもうほぼほぼできています。\n\n最後の仕上げとして、元のWikipediaのテーブルに値が入っていない見出し行があるため、これを除外するようにIF文を追加します。\n\n`=if(E3<>\"\", CONCATENATE(\"<option value='\",LOWER(E3),\"'>\",A3,\"</option>\"), \"\")`\n\nこれでいい感じにoptionタグが生成されました。\n\nあとはふつうにこれをコピペするだけで使えます。\n\n超お手軽！\n\n* * *\n\n英語名の列もあるので、英語版への切替も簡単にできそうです。\n\nおしまい。","date":1512367918000,"tag":["技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"29UZTB4fxcyxE8BgkqESYB","type":"Entry","createdAt":"2020-05-27T09:06:56.064Z","updatedAt":"2020-06-13T04:01:26.348Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"クラウド型IDE「Codeanywhere」×「Firebase」で、PC不要のクラウドプログラミング環境を構築する","slug":"2017/10/31/121052","excerpt":"![f:id:o_tomomichi:20171031110614p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031110614.png \"f:id:o_tomomichi:20171031110614p:plain\")\n\n普段はMacBookとAtomでコードを書いています。\n\nしかし時々夢を見るわけです。これをタブレットとか、何ならスマホでできないのだろうかと。\n\nというわけでそんな環境を実現するべく、クラウドIDEの[Codeanywhere](https://codeanywhere.com/)でFirebaseプロジェクトを動かしてみるのをやってみたメモ。","content":"![f:id:o_tomomichi:20171031110614p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031110614.png \"f:id:o_tomomichi:20171031110614p:plain\")\n\n普段はMacBookとAtomでコードを書いています。\n\nしかし時々夢を見るわけです。これをタブレットとか、何ならスマホでできないのだろうかと。\n\nというわけでそんな環境を実現するべく、クラウドIDEの[Codeanywhere](https://codeanywhere.com/)でFirebaseプロジェクトを動かしてみるのをやってみたメモ。なんでCodeanywhereなのか\n------------------\n\nPCローカルのアプリでなく、クラウド型のIDEというのがけっこう前から存在しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.hitorifest.com%2Ftechnology%2Fonline-ide%2F%23Cloud9_8211_Your_development_environment_in_the_cloud\" title=\"プログラミングエディタもクラウドの時代へ、クラウド型IDE 3選\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.hitorifest.com/technology/online-ide/#Cloud9_8211_Your_development_environment_in_the_cloud\">blog.hitorifest.com</a></cite>\n\nただやはりローカルアプリに比べて動作が遅かったりするため、なかなか使ってる人を見たことはありません。\n\nそれは承知したうえで、あえていま試してみようという心意気。\n\nちなみにこの分野の一番人気は、Amazonに買収されて将来性も明るそうなCloud9。\n\nですが今回は全体的なサービスのデザインが好みだったCodeanywhereを選びました。一応こちらも大手。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcodeanywhere.com%2F\" title=\"Codeanywhere\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://codeanywhere.com/\">codeanywhere.com</a></cite>\n\nなんでFirebaseなのか\n--------------\n\nなんで今回Firebaseかというと、いまFirebaseがアツいからです（当社調べ）。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.google.com%2F%3Fhl%3Dja\" title=\"Firebase\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase.google.com/?hl=ja\">firebase.google.com</a></cite>\n\n弱点だったRealtimeDatabaseの制約も、CloudFirestoreが出たことでかなり改善されました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FYatima%2Fitems%2F54ea22d0cea1acc6cbcb\" title=\"Firebase RTDB + GCP datastore = Firestoreについて第一印象 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/Yatima/items/54ea22d0cea1acc6cbcb\">qiita.com</a></cite>\n\nというわけでFirebaseまじアツいです。アプリじゃなくてWebの人ももっとFirebase使いましょう。\n\nCodeanywhereでFirebaseをローカル起動する\n------------------------------\n\nここからようやく本題。CodeanywhereでFirebaseのプロジェクトを動かすまでの手順です。\n\nサインアップとかはもう終わってる前提で。\n\n### Codeanywhereにプロジェクトをインポート\n\nプロジェクトをインポートするには、Connectionというものを新しくつくります。\n\nインポート先は色々選べるけど、まぁすでにGithubで管理してればそこから持ってくるのが一番楽でしょう。\n\nしばらく待てばエディタ上にプロジェクトのファイルが反映されます。\n\n### コンソールで動かしてみる\n\nCodeanywhereではふつうにコンソール画面が使えます。\n\n最初やり方が見つからなかったけど、Connectionsメニューに追加されたプロジェクト名で右クリックして、「SSH Terminal」を選択すればOK。\n\nコンソールが立ち上がったらさっそくfirebaseコマンドを打ってみますが、これはもちろんエラー。\n\nまずfirebase-toolsをインストールする必要があります。\n\n### nodeをバージョンアップ\n\nこの記事の執筆時点で、Codeanywhereのnodeバージョンは4.4.0。\n\nこのままfirebase-toolsをインストールしても動きませんでした。\n\nのでまずはnodeをバージョンアップ。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fstrsk%2Fitems%2F925644e124efcc964625\" title=\"node.jsのバージョンアップ、バージョン切り替え - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/strsk/items/925644e124efcc964625\">qiita.com</a></cite>\n\n    $ nvm ls-remote\n    \n\nでインストールできるバージョンを確認して、この時点で最新の8.8.1をインストールしました。\n\n    $ nvm install 8.8.1\n    \n\nこのままだと次回起動時にまた4.4.0に戻ってるので、デフォルトを8.8.1に設定します。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2F544%2Fitems%2F7237a32c68619236f446\" title=\"nvmでnode.jsの環境をつくる。 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/544/items/7237a32c68619236f446\">qiita.com</a></cite>\n\n    $ nvm alias default 8.8.1\n    \n\n### firebase-toolsインストール\n\nこれで改めてfirebase-toolsのインストールに挑戦。\n\n    $ npm install -g firebase-tools\n    \n\nで入ったらログイン。ローカルじゃないのでオプションを付けます。\n\n    $ firebase login --no-localhost\n    \n\n### ローカルサーバ起動\n\nそれではFirebaseをローカル（Codeanywhere上なので、ローカルじゃないけど）で起動します。\n\n    $ firebase serve --project XXXXX\n    \n\n無事起動しました。しかしこの状態で「Run Project」をクリックしても、プロジェクトのディレクトリが見れるだけです。\n\n![f:id:o_tomomichi:20171031113622p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031113622.png \"f:id:o_tomomichi:20171031113622p:plain\")\n\n### ポート指定してアクセス\n\nこれはデフォルトで80番ポートを見に行ってるみたいなのですが、Firebaseはデフォルトで5000番ポートを使ってます。\n\nどうしようかと思っていると、ポートを指定してアプリケーションを見ることができるようでした。\n\n![f:id:o_tomomichi:20171031113940j:plain](https://storage.googleapis.com/blog-notsobad/images/20171031113940.jpg \"f:id:o_tomomichi:20171031113940j:plain\")\n\nターミナルを開いたときと同じメニューから、「info」を選択します。\n\ninfoタブが開いたら、一番下にポートを指定してアクセスするためのURLが表示されています。\n\n    http://port-XX.PROJECT-NAME-USERNAMEcodeanywhereXXXXXX.codeanyapp.com\n    \n\nこんなやつ。`port-XX`の部分に好きなポート番号を入れてアクセスすればOKです。\n\n### hostも指定する\n\nそして再挑戦。しかし、今度なこんな画面になりました。\n\n![f:id:o_tomomichi:20171031114437p:plain](https://storage.googleapis.com/blog-notsobad/images/20171031114437.png \"f:id:o_tomomichi:20171031114437p:plain\")\n\nfirebaseをlocalhostで動かしていたので、コンテナの外から見れないようです。\n\nというわけでfirebaseの起動オプションを変更。\n\n    firebase serve --project PROJECT-NAME --host 0.0.0.0\n    \n\n最後にhostオプションをつけて、0.0.0.0で動かします。\n\nこれで再度さっきのURLにアクセスしてみると…\n\n見れた！ついにFirebaseをCodeanywhereローカル(？)上で動かせました！\n\nまとめ\n---\n\nこれで夢のクラウドプログラミングやーと満足したのですが、よく考えたらタブレットなんて持っていないことに気づきました。\n\nあとCodeanywhereのiPhoneアプリもあるので入れてみましたが、なかなかバグが多くて実用は怖い感じでした。 （そもそもターミナル機能もなさそう）\n\nというわけで、やっぱりプログラミングはMacBookでやることになりそうです。\n\nよく考えたら本当の不満はAtomが遅いことだったので、いまさらながらSublimeTextデビューしてみようと思います。\n\nおしまい。","date":1509419452000,"image":"https://storage.googleapis.com/blog-notsobad/images/20171031110614.png","tag":["技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"1QWGxdPuxTuaZ9GweeMnaq","type":"Entry","createdAt":"2020-05-27T09:07:01.680Z","updatedAt":"2020-06-13T04:01:42.792Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Riot.js x Firebaseで作る、超お手軽なパスワード不要のログインシステム「Magic Login」","slug":"2016/12/28/Riot_x_Firebaseで作る、超お手軽なパスワード不要のログイン","excerpt":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。","content":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。環境\n--\n\n*   Firebase: 3.5.0\n*   Riot.js: 3.0.0\n*   SemanticUI: 2.2.4\n\nFirebase x Riot.jsのセットアップ\n-------------------------\n\nこの2つを使ったシステムのセットアップについては、  \nむかしQiitaに記事書きましたのでこちらを参考にしてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F43da4d35007e69d0f484\" title=\"【Riot.js v3対応】Riot.js x Firebase で超お手軽にWebアプリを作ってみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/43da4d35007e69d0f484\">qiita.com</a></cite>\n\n以下この記事の内容をベースに追加修正していきます。\n\n実装方針\n----\n\n*   サイトに訪問したら自動で匿名ユーザーとしてログインさせる\n*   メアドを入力したら、そのアドレスにトークン付きのワンタイムログインリンクを送る\n*   リンクを踏んで来たらログインさせる\n*   匿名ユーザーで作成してたデータを本ユーザーアカウントに紐づける（今回は省略）\n\nこんな感じ。\n\n今回はユーザーが新規登録かログインかを意識せずに使えるように設計してみました。\n\nメアド入れたときに、既登録ならそのままログインリンクを送り、未登録なら新規登録した上でログインリンクを送る、という感じにしています。\n\n新規登録とログインの間違えってけっこう多いし、そんなんシステムで判断してくれよ、って個人的には思うのですよね。。\n\nログイン画面\n------\n\n### 完成イメージ\n\nこんな感じの見た目にしていきます。\n\n![f:id:o_tomomichi:20161228105538p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228105538.png \"f:id:o_tomomichi:20161228105538p:plain\")\n\nSlackのメールだけログイン画面にあからさまに影響を受けた、メールと魔法の杖のアイコンがすてきです。\n\nなんとこれ、画像一切つかわずやってるってなかなかすごくないですか。  \nSemanticUIのアイコン合成機能です。Semanticすごい！\n\n### 実装\n\nauth.tagをこんな感じで実装。\n\n<auth>\n  <div class=\"ui padded basic segment\">\n    <br><br>\n    <div class=\"ui three column center aligned stackable grid\">\n      <div class=\"ui column\">\n        <div class=\"ui center aligned basic segment\">\n            <i class=\"icons\">\n              <i class=\"purple inverted mail circular huge icon\"></i>\n              <i class=\"horizontally flipped wizard huge icon\"></i>\n            </i>\n            <h1 class=\"ui header\">\n              Magic Login\n              <div class=\"sub header\">\n                Get a magic linked email for super easy sign-in;)\n              </div>\n            </h1>\n          <div class=\"ui action fluid input\">\n            <input type=\"text\" ref=\"email\" placeholder=\"Type your email here.\">\n            <button class=\"ui pink right labeled icon button\" onclick={ magicAuth }>\n              <i class=\"send icon\"></i>\n              Send\n            </button>\n          </div>\n          <div if={ message } class=\"ui visible left aligned basic segment { message.type } message\">{ message.text }</div>\n        </div>\n      </div>\n    </div>\n    <br><br>\n  </div>\n\n\n  <script>\n    var that = this\n\n    firebase.auth().onAuthStateChanged(function(user) {\n      that.user = user\n    })\n\n    magicAuth() {\n      that.errorMessage = ''\n      var newPassword = Math.random().toString(36).slice(-12)\n\n      firebase.auth().createUserWithEmailAndPassword(that.refs.email.value, newPassword).then(function(){\n        //新規ユーザーの場合\n        firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n        firebase.auth().signOut()\n        that.message = {\n          type: 'success',\n          text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n        }\n      }).catch(function(error) {\n        //アドレスが既に登録済みの場合\n        if(error.code == 'auth/email-already-in-use') {\n          firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n          that.message = {\n            type: 'success',\n            text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n          }\n        //validationエラーなど\n        }else {\n          that.message = {\n            type: 'error',\n            text: error.message\n          }\n        }\n      }).then(function(){\n        that.update()\n      })\n    }\n  </script>\n</auth>\n\nキモは`firebase.auth().sendPasswordResetEmail(that.refs.email.value)`の部分で、要するにパスワードリセットメールを送ってるのですね。\n\nこれを踏んだあとの処理を魔改造することで、マジックログインを超簡単に実装しています。  \n次はそっちを見てみましょう。\n\n### リンク踏んだあとの処理\n\nriot.jsのroutingで、ログインメールのリンク踏んだときの処理を受け付けています。\n\n    route('/auth..', function(){\n      var q = route.query()\n      if(q.mode == 'resetPassword') {\n        firebase.auth().verifyPasswordResetCode(q.oobCode).then(function(email) {\n          var newPassword = Math.random().toString(36).slice(-12)\n          firebase.auth().confirmPasswordReset(q.oobCode, newPassword).then(function(){\n            firebase.auth().signInWithEmailAndPassword(email, newPassword)\n            alert('ログインしました')\n          })\n        }).catch(function(error){\n          alert('ログインに失敗しました..')\n        })\n      }\n    })\n\n`auth?mode=resetPassword&oobCode=xxxxxx`という感じのURLを踏んでくるイメージです。  \n（パラメータはFirebaseが自動付与）\n\nやってることは、\n\n*   `verifyPasswordResetCode(q.oobCode)`でトークンの検証\n*   正しいトークンならランダムに生成した文字列を新パスワードに設定\n*   新パスワードでログイン\n\nというだけです。\n\nキモは新パスワードをユーザーが意識することはないし、システム側でも管理しないというところ。超セキュア！\n\n次ログインするときはまたリセットするだけですからね。\n\n### Firebaseの設定\n\nFirebase側では、ログインメール（＝パスワードリセットメール）のリンクURLを設定しておきます。\n\nConsoleで、\n\n> Authentication > メールテンプレート > パスワードの再設定\n\nから設定を編集し、「アクションURLをカスタマイズ」というメニューで好きなURLを設定しておきます。\n\n> `https://hogehoge.com/auth`\n\nこんな感じで設定しておけば、パラメータ部分はFirebaseが自動で付与してくれます。\n\nまとめ\n---\n\nというわけで、Firebaseの標準機能に乗っかることで超お手軽にMagicLoginが実装できました。\n\nこの記事では触れなかったけど、アクセス時に全員匿名ユーザーとして裏でログインさせておいて、 データを永続化したいときはこの仕組みで簡単ログイン、という組み合わせにするとかなりいい感じです。\n\nこのサービスで実践投入してますので、よければどんな感じか見てみてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-timeline.jp%2F\" title=\"簡単・便利な無料の年表作成サービス | THE TIMELINE(ザ・タイムライン)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-timeline.jp/\">the-timeline.jp</a></cite>\n\n年表たのしいでよ。","date":1482891904000,"tag":["つくったもの","技術系"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"2B3bq6ywrih8IbwlKOuM05","type":"Entry","createdAt":"2020-05-27T09:07:08.809Z","updatedAt":"2020-06-13T04:02:07.299Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"新しいタブを開くたびに「二十四節気七十二候」の美しい言葉で季節を感じられるシンプルなChrome拡張機能「Tab Sekki」をつくりました。","slug":"2016/12/12/tabsekki","excerpt":"![f:id:o_tomomichi:20161212201514p:plain](https://storage.googleapis.com/blog-notsobad/images/20161212201514.png \"f:id:o_tomomichi:20161212201514p:plain\")\n\n### 毎日11回も新しいタブ見てるって知ってた？\n\nFirefoxの調査によると、平均的なインターネットユーザーは[1日11回ブラウザの新しいタブを開いている](http://news.mynavi.jp/articles/2012/06/06/ff13/)そうです。\n\n普段たいして気にすることもない新しいタブですが、実は毎日何回も目にしているので、どうせなら何か有意義に使いたいと思いますよね。","content":"![f:id:o_tomomichi:20161212201514p:plain](https://storage.googleapis.com/blog-notsobad/images/20161212201514.png \"f:id:o_tomomichi:20161212201514p:plain\")\n\n### 毎日11回も新しいタブ見てるって知ってた？\n\nFirefoxの調査によると、平均的なインターネットユーザーは[1日11回ブラウザの新しいタブを開いている](http://news.mynavi.jp/articles/2012/06/06/ff13/)そうです。\n\n普段たいして気にすることもない新しいタブですが、実は毎日何回も目にしているので、どうせなら何か有意義に使いたいと思いますよね。### 新しいタブはChrome拡張でカスタマイズできるんですよ\n\nGoogleChromeでは、拡張機能を入れることでこの新しいタブに表示される内容をカスタマイズすることができます。\n\n[「新しいタブ」を有効活用できるChromeの拡張機能5選 | 東京上野のWeb制作会社LIG](https://liginc.co.jp/web/tool/browser/66547)\n\nいろんな拡張がありますが、既存の拡張機能で多いのが、便利なリンクやツールを置いたものですね。  \n天気やカレンダー・ToDoリストなどが鉄板系。\n\n### でも、ほしいのはもっとシンプルな…\n\nなんだけど、そんなにがっつり新しいタブを見たいわけでもなくて、もうちょっとこうシンプルで主張しなくて、それでいて何かちょっとだけ毎日がいい感じになるような、そんな新しいタブが、わたしはほしい。\n\nと思ったので、作りました。 その名も「TabSekki」。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Ftab-sekki-%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%80%E6%B0%97%E4%B8%83%E5%8D%81%E4%BA%8C%E5%80%99%2Fhpiplbccmdafmjoompeplcakgghggcfh\" title=\"Tab Sekki - 二十四節気七十二候\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/tab-sekki-二十四節気七十二候/hpiplbccmdafmjoompeplcakgghggcfh\">chrome.google.com</a></cite>\n\n新しいタブを開くと、いまの時期が該当する「二十四節気七十二候」の暦を表示してくれるという、ただそれだけの拡張機能です。\n\n新しいタブを開いたときの画面が、こんな感じ↓になります。\n\n![f:id:o_tomomichi:20161212192746p:plain](https://storage.googleapis.com/blog-notsobad/images/20161212192746.png \"f:id:o_tomomichi:20161212192746p:plain\")\n\nあとせっかくなので背景にはその季節をイメージした日本の伝統色を配し、うっすら和文様をデザインしております。\n\nランダムで違う「候」に切り替える機能もあるので、ヒマなときはポチポチしてみてください。\n\n### 知らなかったでは済まされない「二十四節気七十二候」とは\n\n[二十四節気と七十二候｜暦生活](http://www.543life.com/season.html)\n\n二十四節気は、「夏至」「秋分」など、今でも耳にする機会が多いですね。 もともとは中国で一年を分割してその季節を表す名称をつけたものです。\n\n七十二候はその「節気」をさらに3つずつに分割したもので、例えばこの記事を書いている11月30日だと「朔風払葉（きたかぜこのはをはらう）」となります。 かっこいいですね。\n\n七十二候には、その時期を代表する気象や動植物の動き、人の営みなど、昔の人が季節をどう感じていたかを伝える美しい言葉が多いです。\n\n### さぁ、新しいタブを開くたびに季節を感じる素敵な生活へ\n\n毎日パソコンに向き合って仕事していると、なかなか季節を感じることもない今日この頃。\n\nせめて新しいタブを開いたときくらい、美しい言葉と色で、ふっと窓の外を見るきっかけにでもなれば幸いです。\n\nインストールはChromeウェブストアからどうぞ。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Ftab-sekki-%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%80%E6%B0%97%E4%B8%83%E5%8D%81%E4%BA%8C%E5%80%99%2Fhpiplbccmdafmjoompeplcakgghggcfh\" title=\"Tab Sekki - 二十四節気七十二候\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/tab-sekki-二十四節気七十二候/hpiplbccmdafmjoompeplcakgghggcfh\">chrome.google.com</a></cite>\n\nランダム切替を無制限にできる有料版も用意しておきましたので、万が一ランダム表示したくてたまらない方がいたら、応援のつもりでポチッとしてくれるとうれしいです。","date":1478082530000,"image":"https://storage.googleapis.com/blog-notsobad/images/20161212201514.png","tag":["つくったもの","技術系"]}}]},"tag":"技術系","page":1,"hasNextPage":false},"__N_SSG":true}
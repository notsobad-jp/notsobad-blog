{"pageProps":{"entries":{"items":[{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"5if6MqMHq4i7gglLyZ6qpK","type":"Entry","createdAt":"2020-05-27T09:06:47.317Z","updatedAt":"2020-06-13T04:00:50.916Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"3年間運用してきたWebサービスを「Rails x Heroku」から「Riot.js x Firebase」に移行した話","slug":"2018/03/31/132507","excerpt":"![f:id:o_tomomichi:20180312145525p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312145525.png \"f:id:o_tomomichi:20180312145525p:plain\")\n\nWeb上で簡単にきれいなトーナメント表が作れる、「THE TOURNAMENT」という超絶地味なサービスを運営しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-tournament.jp%2F\" title=\"THE TOURNAMENT | 簡単・便利な無料のトーナメント表作成サービス\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-tournament.jp/\">the-tournament.jp</a></cite>\n\n最初に作ったのが2014年だったので、気づけばもう運営4年目。\n\nずっと「Rails×Heroku」で運用してきたのですが、ちょうど先日サービスを全面リニューアルして、「Riot.js×Firebase」に移行しました。\n\nそんなお引っ越しの記録と振り返ってみての感想です。\n\n（2018年8月追記）\n\nFirebaseは恐ろしい勢いで改善し続けているので、この記事に書いてあるつらみもどんどん解消されつつあります。 ますますおすすめなのでぜひ使ってみてください。\n\n[The Firebase Blog: More Cloud Firestore Improvements!](https://firebase.googleblog.com/2018/08/more-cloud-firestore-improvements.html)\n\n（追記おわり）","content":"![f:id:o_tomomichi:20180312145525p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312145525.png \"f:id:o_tomomichi:20180312145525p:plain\")\n\nWeb上で簡単にきれいなトーナメント表が作れる、「THE TOURNAMENT」という超絶地味なサービスを運営しています。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-tournament.jp%2F\" title=\"THE TOURNAMENT | 簡単・便利な無料のトーナメント表作成サービス\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-tournament.jp/\">the-tournament.jp</a></cite>\n\n最初に作ったのが2014年だったので、気づけばもう運営4年目。\n\nずっと「Rails×Heroku」で運用してきたのですが、ちょうど先日サービスを全面リニューアルして、「Riot.js×Firebase」に移行しました。\n\nそんなお引っ越しの記録と振り返ってみての感想です。\n\n（2018年8月追記）\n\nFirebaseは恐ろしい勢いで改善し続けているので、この記事に書いてあるつらみもどんどん解消されつつあります。 ますますおすすめなのでぜひ使ってみてください。\n\n[The Firebase Blog: More Cloud Firestore Improvements!](https://firebase.googleblog.com/2018/08/more-cloud-firestore-improvements.html)\n\n（追記おわり）* * *\n\n🤔なんで移行したの？\n-----------\n\n大前提として、HerokuとRailsは今でも大好きですw\n\nじゃあなんで移行したんだよって話ですが、理由は大きく以下の２つでした。\n\n*   Herokuを無料で使い続ける限界が近づいていた\n*   トーナメント作成をjsベースでインタラクティブにしたかった\n\n前にこんなLTもしましたが、トーナメントは相当アクセスが増えても無料でしのげる仕組みにはしていました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F02%2F04%2F170844\" title=\"Herokuの無料プランで月間100万PVをさばく（さばかない）話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/02/04/170844\">blog.notsobad.jp</a></cite>\n\nとはいえおかげさまで作成側の負荷も増えてきていたのと、DBも無料だと1万レコード制限があって、そろそろこれも限界が近づいていました。\n\nまた、リニューアルの大きな目的の1つが、jsでインタラクティブにトーナメント表を編集できるようにすることでした。\n\n![f:id:o_tomomichi:20180331115841p:plain](https://storage.googleapis.com/blog-notsobad/images/20180331115841.png \"f:id:o_tomomichi:20180331115841p:plain\")\n\nWebpackerでjsフレームワークの導入に挑戦するという選択肢もあったのですが、まぁ率直に「これRailsじゃなくてよくね？」と気づいてしまったのは否定できません。\n\nというか、こういうフロント中心のサービスでバックエンドも楽したいって思ったときに、Firebaseがどんぴしゃすぎるんですよね。。 [別のプロダクト](https://the-timeline.jp/)で1年くらいFirebaseを運用していたこともあり、もうこれでいいんじゃないのーと思えたのも移行のきっかけです。\n\n1年前の時点でフロントエンドのフレームワークはまったく経験がなかったので、一番シンプルで学習コストが低そうなRiot.jsをチョイスしてました。いまならVue.jsにしてたかもですが、Riot.jsもこれくらいの規模なら全然問題なく、シンプルでよい感じです。\n\n* * *\n\n😇 移行してみてのうれしみ\n--------------\n\n### 無料枠が大きすぎ\n\nFirestoreもHostingもFunctionsも、いまのところ無料枠で収まりそうです。うれしい。\n\nしかもつい先日、従量課金型のBlazeプランにも無料のSparkプランとほぼ同じ無料枠が割り当てられるようになりました。 （いままではBlazeを選択したら最初の1バイトから課金対象になってた）\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffirebase.googleblog.com%2F2018%2F03%2Fadding-free-usage-to-blaze-pricing-plan.html\" title=\"Adding free usage to Blaze pricing plan\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://firebase.googleblog.com/2018/03/adding-free-usage-to-blaze-pricing-plan.html\">firebase.googleblog.com</a></cite>\n\nこれなら基本無料で運用できて、急なアクセス増のときだけ従量課金でさばいてくれるので、かなりよさそうです。\n\nただBlazeは上限設定ができないのが怖くてまだ移行してないけど。。\n\n### ユーザー認証が簡単すぎ\n\nFirebaseのAuthenticationは、めちゃくちゃよくできています。\n\nデフォルトで主要SNSログインの仕組みも用意してくれてるので、各SNS側でアプリだけ作って指示通り設定すれば、すぐにログインの仕組みができてしまいました。\n\n![f:id:o_tomomichi:20180312141940p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312141940.png \"f:id:o_tomomichi:20180312141940p:plain\")\n\nさらに最近のアップデートでパスワード不要のメールログインの仕組みが公式に実装されました。神！\n\n[Authenticate with Firebase Using Email Link in JavaScript  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth)\n\n自前で同じ仕組みを実装してたので、早く乗り換えねば。\n\n### Functionsが便利すぎ\n\nこれはほんとに便利。\n\nうちではデータの更新を検知して、なんちゃってSSRみたいなことをして静的HTMLを出力するという処理を走らせています。\n\n![f:id:o_tomomichi:20180312142426p:plain](https://storage.googleapis.com/blog-notsobad/images/20180312142426.png \"f:id:o_tomomichi:20180312142426p:plain\")\n\nいままではHerokuのSchedulerアドオンでバッチ処理を走らせて同じことをしていました。 ただこれがFree Dynoのメモリを圧迫していて、処理が安定しなくなっていた原因でもありました。\n\nFunctionsは無料プランでも結構なキャパがあるので、頼もしいです。すごい。\n\n* * *\n\n💩 移行してみてのつらみ\n-------------\n\n一方でFirebaseに移行して感じているつらみと不安。\n\n### カジュアルに障害が起きる\n\nベータのサービスが多いせいもありますが、よく落ちます。\n\n自分が使っている範囲だと特にHostingとFunctionsがやばい。カジュアルに落ちます。\n\nインフラ側で落ちちゃうとどうしようもなくて結構困ってしまうのですが、DB（Firestore）が無事でHostingが落ちてるだけなら、最悪Storageにでも置きなおしてドメイン振ればいけるはず。\n\n一方でFirestoreが落ちると、けっこうどうしようもないですね。どうしよう。 今のところFirestoreはほぼ障害ないのが救いですが。。（レスポンスがめっちゃ遅くなるときはある）\n\n### 管理画面が貧弱\n\nサービスを運営していると、データをちょっと修正したいときとかあるじゃないですか。 Firebaseの公式管理画面（コンソール）だと、これがものすごく大変です。 データの一覧性もないし、検索性はほぼないし、クエリ投げたりもできないし。。\n\n### データバックアップができない\n\nできません。どうしたらいいんですか（切実）。\n\nRealtimeDatabaseは有料プランならバックアップオプションが用意されてたんですが、Firestoreは有料版でもそもそも存在しない。。 一応npmモジュールでバックアップ取れるやつがあるので触ってみてますが、もうちょっと公式でサポートしてほしい。\n\n### 初回表示が遅くなった\n\nこれはfirebaseの問題ではなく、SPA化したことの弊害ですね。 何も考えずにSPA化すると、最初の読み込みが重くなりがち。一回読み込めば中の遷移はさくさくなんですけどね。\n\nキャッシュがない状態でもユーザービリティを損なうほど遅いわけじゃないので、いったん後回しにしてます。 ただPageSpeedInsightとか Lighthouseとかでauditしてみると、めっちゃ怒られる。。\n\nトップページから入ってきて中に進むユーザーが多いので、将来的にはトップページを静的にしてAMP化、後続のアプリ部分をPWA化しておいて、AMPアクセス時にpreloadするような仕組み（PWAMP！）にすれば爆速化できるんじゃないかと思ってます。が、PWAこわくてまだ手を出せてない。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.ampproject.org%2Fdocs%2Fintegration%2Fpwa-amp%23amp-as-entry-point-into-your-pwa\" title=\"Combine AMP with Progressive Web Apps – AMP\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.ampproject.org/docs/integration/pwa-amp#amp-as-entry-point-into-your-pwa\">www.ampproject.org</a></cite>\n\nMobileFirstIndexも始まったし、そろそろやらねばですね。がんばる。。\n\n### SEOも弱くなった\n\nこれもFirebaseは関係なく、よく言われるSPA化の弊害に見事にはまってしまいました。\n\n*   Googleにインデックスされず、SEOに弱くなった\n*   SNSシェア時にOGPが反映されない\n\nどちらもbotがアクセスしてきたときに、動的に変更してるmetaタグを読めず、エンドポイントのindex.htmlに書いてあるデフォルトのmetaタグを読んじゃってることが原因です。\n\nこれについては、特にSEO/OGPが必要になるコンテンツページに絞って、Functionsで動的にmetaタグを書き換えて配信することで一応対応できました。\n\nまたbotがページ内のリンクたどれてるかもあやしいので、sitemapとRSSフィードを配信してクロールしやすくもしています。\n\nこの辺の詳細はまた別で整理してみようかと。\n\n（2018年4月3日追記）\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F04%2F03%2F235004\" title=\"Riot.jsでSPAにしたらGoogleにインデックスされなくなったので、FirebaseのFunctionsでmetaタグだけレンダリングした話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/04/03/235004\">blog.notsobad.jp</a></cite>\n\n書きました。\n\n* * *\n\nまとめ\n---\n\nなぜかうれしみよりつらみの方が多くなってしまった。なぜだ。。 しかし実際にリニューアルは不可避でしたし、いまのところ非常にうまく機能してると思います。\n\nまたぼくが解決策を知らないだけの可能性もあるので、もしお気づきのところあれば指摘もらえるとうれしいです。 ベータ版を抜ければ解決しそうな問題も多いので、早く公式で色々対応してくれるといいですね。\n\n信じてもらえないかもしれないけど、Firebaseは本当におすすめですよ。 みんな早くおいで！\n\nおしまい。","date":1522470307000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180312145525.png","tag":["技術系","THE TOURNAMENT","Firebase","Heroku","Riot.js"]}},{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"2widkdbc59vz"}},"id":"25Tmc08939VifF0clDp4wH","type":"Entry","createdAt":"2020-05-27T09:06:51.307Z","updatedAt":"2020-06-13T04:01:09.106Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Herokuの無料プランで月間100万PVをさばく（さばかない）話","slug":"2018/02/04/170844","excerpt":"![f:id:o_tomomichi:20180204152944p:plain](https://storage.googleapis.com/blog-notsobad/images/20180204152944.png \"f:id:o_tomomichi:20180204152944p:plain\")\n\n「Heroku Meetup #19 Heroku Trust!」でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fherokujp.doorkeeper.jp%2Fevents%2F69249\" title=\"Heroku Meetup #19 Heroku Trust!\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://herokujp.doorkeeper.jp/events/69249\">herokujp.doorkeeper.jp</a></cite>\n\nせっかくなので、LTのスライドを一部修正して掲載しておきます。\n\nHeroku Meetupはずっと行きたかったけど今まで都合がつかず、初参加できてよかったです。\n\nピザごちそうさまでした🍕","content":"![f:id:o_tomomichi:20180204152944p:plain](https://storage.googleapis.com/blog-notsobad/images/20180204152944.png \"f:id:o_tomomichi:20180204152944p:plain\")\n\n「Heroku Meetup #19 Heroku Trust!」でLTさせてもらってきました！\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fherokujp.doorkeeper.jp%2Fevents%2F69249\" title=\"Heroku Meetup #19 Heroku Trust!\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://herokujp.doorkeeper.jp/events/69249\">herokujp.doorkeeper.jp</a></cite>\n\nせっかくなので、LTのスライドを一部修正して掲載しておきます。\n\nHeroku Meetupはずっと行きたかったけど今まで都合がつかず、初参加できてよかったです。\n\nピザごちそうさまでした🍕LT内容\n----\n\nというわけで発表したスライドはこちら。\n\n[https://speakerdeck.com/tomomichi/herokufalsewu-liao-purandeyue-jian-100mo-pvwosabaku-sabakanai-hua](https://speakerdeck.com/tomomichi/herokufalsewu-liao-purandeyue-jian-100mo-pvwosabaku-sabakanai-hua)\n\n3行で要約\n-----\n\n*   それなりにアクセスが多いサイトでも、場合によってはHerokuのFreeDynoだけでさばけるよ\n*   Herokuは更新系に集中して、アクセスが多い閲覧系のコンテンツはGoogleCloudStorage(GCS)とかS3に置いちゃえばいいんだよ\n*   最近だとFastlyとか使うのがいいらしいけど、GCS/S3も安くて手軽にできるからおすすめだよ\n\n補足とか言い訳とか\n---------\n\nちょうど発表の数日前に、似た内容の話がはてぶでバズってました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.mu%2Fkonpyu%2Fn%2Fnb424a9a2ea8a\" title=\"実はHerokuで充分なのでは問題｜こんぴゅ｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://note.mu/konpyu/n/nb424a9a2ea8a\">note.mu</a></cite>\n\nまたさらに前に話題になった[dev.to](https://dev.to/)もHeroku/Railsであの爆速を実現してて、その速さのコアな部分はFastlyによるCDN配信だったと理解しています。\n\n今回発表した内容も考え方はほぼ同じなんですが、Fastlyとかを使うんじゃなくてGCS使ってるところが違う点です。\n\nまたメリット/デメリットの比較に関して、今回は配信速度の追求よりも、大量のアクセスをちゃんとさばくというところに重点を置いているため、その点もご了承ください。\n\n個人的にはdev.toの爆速っぷりに驚いた一人なので、今後Fastly（もしくは類似サービス）を使うのはもっと主流になっていくんじゃないかと思っています。\n\nただ現時点でまだCDNでの動的コンテンツキャッシュをよく把握できておらず、自分の力量を考えると本番で試すのは怖いなーという感じです。\n\nあと金額的にもFastlyは多少高いのかなーと思っていて、個人のWebサービスなんかで使うにはまだハードルが高いという印象です。\n\n※そもそもFastly使ったことないので、違うよっていうご意見あればぜひ教えてほしいです。\n\nその点GCS方式は、ベストプラクティスではないかもしれないけど、わたし程度のエンジニアレベルで3年運用してて、お安くてトラブルもなく、今のところ超快適です。\n\nなので少なくとも現時点で、お手軽に試す分にはおすすめできるんじゃないかなーという話でした。\n\nちなみに、LTのあと懇親会で色んな方に話しかけてもらったのですが、ちゃんとした開発会社さんからS3で似た仕組みを運用してるよ、という話を聞きました。\n\n4年前に試行錯誤してこのやり方にたどり着いたのですが、まぁ間違ってなかったんだなーと思えてうれしい限りです。\n\nまとめというか、余談\n----------\n\nせっかくLTまでしたんですが、THE TOURNAMENTは現在、Rails/HerokuからFirebase/Riot.jsに絶賛リニューアル中です。\n\nしかしFirebaseにインフラが変わっても、このGCS方式の仕組み自体は続けています。\n\nいままでHTML出力は、Herokuのschedulerアドオンでバッチ処理していたのですが、CloudFunctionでFirestoreの更新をトリガーに動かすように変えたくらいですね。CloudFunction超便利。\n\n安定稼働してきたらFirebase版のやり方もまとめてみたいと思います。\n\n### 余談の余談\n\nHerokuからの移行を決めたのには色々理由があるのですが、Herokuがだめだからというわけではなく、作ってるサービスとの相性が大きいです。\n\nトーナメントだとデータ構造がほぼjsonで、フロントでうにょうにょ動かすのがメインになることを考えたときに、Heroku/Railsである必然性がなくてですね。。（気付くのが遅い）\n\n個人的にいまでもHerokuは大好きです。\n\n現状Herokuの無料プランでずっと動かせるのは1アプリだけなので、トーナメントの枠が空いたら、4年ぶりにHerokuで新しいアプリを動かせるのが楽しみだったりします。\n\nおしまい。\n\n##### （2018年4月1日追記）\n\nFirebaseへのお引っ越しが完了したので記事にまとめました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fblog.notsobad.jp%2Fentry%2F2018%2F03%2F31%2F132507\" title=\"3年間運用してきたWebサービスを「Rails x Heroku」から「Riot.js x Firebase」に移行した話 - NOT SO BADなブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://blog.notsobad.jp/entry/2018/03/31/132507\">blog.notsobad.jp</a></cite>\n\nさようなら、Heroku。また会う日まで。。","date":1517731724000,"image":"https://storage.googleapis.com/blog-notsobad/images/20180204152944.png","tag":["個人開発論","技術系","Heroku"]}}]},"tag":"Heroku","page":1,"hasNextPage":false},"__N_SSG":true}
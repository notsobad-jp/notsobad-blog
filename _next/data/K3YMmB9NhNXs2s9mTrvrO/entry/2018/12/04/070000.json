{"pageProps":{"entry":{"title":"2011年の個人開発を支えた技術","slug":"2018/12/04/070000","excerpt":"この記事は、「[個人開発サービスに用いられている技術 Advent Calendar 2018](https://crieit.net/advent-calendars/2018/technology)」4日目の記事です。\n\n![f:id:o_tomomichi:20181119185903p:plain](https://storage.googleapis.com/blog-notsobad/images/20181119185903.png \"f:id:o_tomomichi:20181119185903p:plain\")\n\n2011年（なんともう7年前！）に、初めての個人開発で「booklovesmusic（ブック・ラブズ・ミュージック）」というサービスを作りました。\n\n個人的に思い入れが強くサービスが死んでからもドメインを維持してたのですが、さすがにキリがないので今年で更新をやめることにしました。 色々整理してると当時の状況を思い出して懐かしくなったので、供養の意味も込めて2011年当時の個人開発環境を振り返ってみようと思います。\n\nこれから開発しようという方には何の参考にもなりませんが、ちょっとでも懐かしい気持ちになってもらえれば本望です。","content":"この記事は、「[個人開発サービスに用いられている技術 Advent Calendar 2018](https://crieit.net/advent-calendars/2018/technology)」4日目の記事です。\n\n![f:id:o_tomomichi:20181119185903p:plain](https://storage.googleapis.com/blog-notsobad/images/20181119185903.png \"f:id:o_tomomichi:20181119185903p:plain\")\n\n2011年（なんともう7年前！）に、初めての個人開発で「booklovesmusic（ブック・ラブズ・ミュージック）」というサービスを作りました。\n\n個人的に思い入れが強くサービスが死んでからもドメインを維持してたのですが、さすがにキリがないので今年で更新をやめることにしました。 色々整理してると当時の状況を思い出して懐かしくなったので、供養の意味も込めて2011年当時の個人開発環境を振り返ってみようと思います。\n\nこれから開発しようという方には何の参考にもなりませんが、ちょっとでも懐かしい気持ちになってもらえれば本望です。※当時新人エンジニアだった自分の開発環境なので、当たり前ですがこれが当時のスタンダードというわけではありません。またここで挙げてる技術や環境がレガシーというつもりもまったくありませんので誤解なさいませんように。。\n\n* * *\n\nその前にサービスを追悼する\n-------------\n\n### 🤔どんなサービスだったの？\n\nbooklovesmusicは、読書にぴったりの音楽をおすすめしてくれるサービス、というコンセプトでした。\n\n具体的には、好きな本を選ぶとその本に紐付いたYoutubeのプレイリストが表示されるので、それを聴きながら読書を楽しむことができます。\n\n本とプレイリストの紐付けは完全にユーザー投稿型です。 サイト上で好きなYoutubeの動画（音楽）をいくつか選ぶとAPI経由でYoutubeのプレリストを作成し、そのプレイリストと本を紐付ける、という仕様になっていました（がんばってるな。。）\n\n### ☠️一瞬のアクセスと、死\n\nリリース後にいくつかメディアでも取り上げていただき、ありがたいことにデビュー作にしてはそれなりのアクセスがありました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.lifehacker.jp%2F2012%2F05%2F120507booklovesmusic.html\" title=\"読書にぴったりの音楽をおすすめし合うサービス｢booklovesmusic｣\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.lifehacker.jp/2012/05/120507booklovesmusic.html\">www.lifehacker.jp</a></cite>\n\nしかし、当たり前ですがほとんどのユーザーは投稿じゃなくて閲覧しかしなくて、いくら本を検索しても紐づくプレイリストが存在しないという状態でした（そりゃそうですね）。\n\n結局リリースから半年くらいは追加開発しながら運用を続けて、最後は誰にも使われなくなってフェードアウト、、という感じでこのサービスは一生を終えました。南無。\n\nいま振り返ると反省点ばっかりですが、[最初から期待値を下げて開発する](https://blog.notsobad.jp/entry/2018/07/30/110000)のが定番になった最近の自分からすると、当時の勢いみたいなのがうらやましかったりもします。\n\n* * *\n\n当時の開発状況\n-------\n\nというわけでこのbooklovesmusicを開発していた2011年当時の環境を、できるだけ思い出して書いてみようと思います。 不正確な記述もあるかと思いますがご容赦ください。\n\n### 🛠言語/フレームワーク\n\nbooklovesmusicはPHPで開発していて、フレームワークとしてCakePHPを使っていました。まだ1系だったのかな。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcakephp.org%2Fjp\" title=\"CakePHP - Build fast, grow solid | PHPフレームワーク\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cakephp.org/jp\">cakephp.org</a></cite>\n\nこのちょっと前にプログラミング覚えたいと思って未経験の求人を探してたのですが、当時Web界隈ではほとんどPHPの求人ばっかりだったと思います。で自分も無事に新人エンジニアとしてPHPから入門しました。\n\n仕事では確か[Zend](https://framework.zend.com/)ベースの独自フレームワークを使ってて、モダンな環境を知りたい！と思ってRailsインスパイアなCakePHPを使ってみたはず。\n\nControllerとかModelとか大量に作られるフォルダの意味が全然わからず、最初はかなり絶望したのがいい思い出です。。 この経験のおかげで後にRailsさわったときのハードルが多少下がった気がするので、まったく無駄というわけではなかった、と思いたい。\n\n### 💻ローカル環境\n\nマシンは買ったばかりのMacBookPro（Mid2010）を使っていました。 [メモリを増設](https://blog.notsobad.jp/entry/54791577771)したり[SSDに換装](https://blog.notsobad.jp/entry/82691328054)したりして、けっこう最近まで使ってた愛用マシンです。\n\nローカルサーバーは象のアイコンでおなじみの[MAMP](https://www.mamp.info/en/)を使ってましたね。便利だったよMAMP 🐘\n\nエディタは確か[miエディタ](https://www.mimikaki.net/)（旧名ミミカキエディット）を使ってたはず。\n\nその頃会社のマシンはWindowsで、[Eclipse](https://www.eclipse.org/)が推奨されてたけどどうしても好きになれず、途中からはもっぱら[サクラエディタ](https://sakura-editor.github.io/)を愛用してました。WindowsではXampp使ってましたね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsakura-editor.github.io%2F\" title=\"Sakura Editor\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://sakura-editor.github.io/\">sakura-editor.github.io</a></cite>\n\n### ⚙インフラ\n\nインフラはレンタルサーバーで、ロリポップの当時の最安プラン（月200円くらい？）を使っていました。 仕事の研修で使ってたので、同じ環境に揃えたんですね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flolipop.jp%2F\" title=\"ロリポップ！レンタルサーバー\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://lolipop.jp/\">lolipop.jp</a></cite>\n\nAWSとかもまだそこまで一般的じゃなくて、個人開発だとレンタルサーバーは割と一般的な選択肢だったような気がします。知らんけど。\n\nちなみにメディアで取り上げてもらったときはアクセスが集中して一瞬でサーバーが落ちたのですが、なんとこのときはまだ「サーバーが落ちる」という概念を知らなかったです（すごい）。\n\nロジックが間違ってないのに動かないのはおかしい！と思っているうちに波が去って、よくわからないうちに復帰してました。 わからないことがあったら詳しい人にちゃんと聞こう（大事）。\n\n### 📦デプロイ\n\n男は黙ってFTP、です。 毎回プロジェクトフォルダ全体を、レンタルサーバーのディレクトリにFTPで上書きアップしていました。\n\n後述するようにバージョン管理はまだ導入してなかったので、いま思うとよく無事にプロジェクトを維持してたなーという印象。 しかし実際何とかなってたので、まぁがんばれば何とかなるんだなという知見を得ました。\n\nFTPのクライアントソフトは黄色いアヒルの[Cyberduck](https://cyberduck.io/)を使ってました。\n\n### 🔗バージョン管理\n\nもちろんまだ導入していませんでした。 当時は世間的にもまだgitが今ほど普及してなくて、[Subversion](https://subversion.apache.org/)（SVN）の方が主流だったような。\n\nとぼけた亀がマスコットの[TortoiseSVN](https://tortoisesvn.net/)を仕事では使ってたので、バージョン管理の概念自体は知ってたはず。 まぁ趣味開発だしそこまで必要性を感じなかったんですかね。。なかなか男らしい決断です。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftortoisesvn.net%2F\" title=\"Home · TortoiseSVN\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://tortoisesvn.net/\">tortoisesvn.net</a></cite>\n\nバージョン管理がない上に当初はステージング環境もなかったので、デプロイして動かなかったときは悲惨です。 これはどう対応してたかというと、定期的にプロジェクトフォルダ全部コピーしてバックアップ取ってたような記憶があります。 本当によく管理できてたな。。\n\nでもいま振り返ると、余計な学習コストを増やさなかったのはいい判断だった可能性もワンチャンあるんじゃないかと🐶 すべてが初めてだったので、全部まともにやってたらとても完成しなかったはず。。\n\n### 🤖ステージング環境\n\nというわけで、何回か本番デプロイして動かない！という経験をしたあとに、ステージング環境を作るということを学びましたw\n\nレンタルサーバーでステージング用にディレクトリをもう1個切って、本番アップする前にそっちにアップするようにしたんですね。 これで随分デプロイに安心感が出たような気がします。\n\nしかし一部本番とパスが違って動かないところがあって、特定の処理はステージング用に書き換えたりしてたような記憶が。 本番とステージングのソースに乖離が出てたので、ステージングでは動いたのに本番では動かなかったり。ステージングとは。。\n\n### 🎨デザイン/CSS\n\n最後はデザインまわりの話。 この頃からデザインも完全にひとりでやっていて、覚えたてのPhotoshopで画面イメージ作ったりしてました（もう使い方わすれた。。）\n\n##### CSSフレームワーク\n\nCSSもフレームワークは使ってなくて、完全に手探りでフルスクラッチです。 ちょうどこの頃にBootstrapが登場して話題になり始めてたような気がするけど、このときはまだ使ってませんでした。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgetbootstrap.com%2F\" title=\"Bootstrap\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://getbootstrap.com/\">getbootstrap.com</a></cite>\n\n次のプロダクトで使ってみて、あまりの便利さに衝撃を受けたのを今でも覚えてます。 最近はずっと[Semantic UI](https://semantic-ui.com/)がお気に入りです。\n\n##### レスポンシブ対応\n\n当時はまだまだガラケーも残ってたけど、スマホも普及期に入ってたはず。（仕事でガラケーの公式サイトも大量に作ってたな。。）\n\n仕事ではPCとスマホで完全にviewを分けることが多かったけど、ぼちぼちレスポンシブデザインなんてことも言われ始めてた気がします。\n\nが、booklovesmusicは完全にPCオンリー。スマホ対応を後回しにして、その「後」が永遠に来なかったパターンですね。 あるある。\n\n仕事ではもちろんスマホ対応もしてたのですが、この頃はまだ全体的にPCファーストで作って、それをスマホ対応するっていう空気感だったような気がします。今では完全に逆のことが多いですね。\n\n##### アイコンとか\n\nあと個人的に今と大きく違うのは、ちょっとしたアイコンとかもこの頃は全部Photoshopで自作してました。えらい。まぁ他に選択肢を知らなかったんですが。。 今だと良くも悪くもfontawesomeとかで済ましちゃってますね。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ffontawesome.com%2F\" title=\"Font Awesome 5\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://fontawesome.com/\">fontawesome.com</a></cite>\n\n自作のアイコンが全部微妙にいびつで歪んでるのが、いま見ると非常にほほえましいw\n\n* * *\n\n### まとめ\n\nという感じで、いま振り返っても何で作りきれたのか不思議なくらい、初めて尽くしの開発でした。しかし楽しかった…！\n\nさすがに7年もやってると当時よりは技術も上がって（そしてそれ以上に環境がよくなって）作りたいものを思い通りにつくれるようになってきました。 でも一方で、中途半端に技術と知識がついてリリースまでの動きが遅くなってるのも年々感じます。\n\nバージョン管理もしてないのにライブラリの中身を手動で書き換えて強引に動かしていたあの頃の情熱を思い出して、来年は個人開発ももっとバリバリやっていきたい所存です。  \nまぁそのライブラリのバージョンが上がった瞬間に追従できなくて死んだので、やっぱり最低限の知識はあった方がいいと思いますけど😇\n\n* * *\n\nちなみに、booklovesmusicはこれでサービス終了しますが、もしコンセプトに共感してリメイクしたいという方がいたらぜひ[@kame\\_f\\_no7](https://twitter.com/kame_f_no7)まで連絡もらえるとうれしいです。\n\nそこまで好きなら自分で作れよって感じなんですが、残念ながらぼくは本読むときに音楽聞かないんですよね（なんで作ったw）\n\n[個人開発はドッグフーディングが一番](https://blog.notsobad.jp/entry/2017/12/05/101957)なので、ぜひ本と音楽が好きな方に引き継いでもらえるとうれしいです。\n\nおしまい。","date":1543874400000,"image":"https://storage.googleapis.com/blog-notsobad/images/20181119185903.png","tag":["技術系","ポエム","個人開発論"]}},"__N_SSG":true}
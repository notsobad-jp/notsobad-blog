{"pageProps":{"entry":{"title":"Riot.js x Firebaseで作る、超お手軽なパスワード不要のログインシステム「Magic Login」","slug":"2016/12/28/Riot_x_Firebaseで作る、超お手軽なパスワード不要のログイン","excerpt":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。","content":"(2018年8月追記)  \n現在この機能はfirebase公式で提供されています。  \nこのブログの実装方法もまだ使えますが、簡単なのでぜひ公式のをお使いください。  \n[JavaScript でメールリンクを使用して Firebase 認証を行う  |  Firebase](https://firebase.google.com/docs/auth/web/email-link-auth?hl=ja)  \n(追記終わり)\n\n* * *\n\nWebサービスで本当にパスワードっているの？？という意識高いスタンスから、  \nむかしQiitaにRailsでパスワードなしログインの実装について記事を書きました。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F832dbd6c1a0a012519fd\" title=\"【Rails × sorcery】Slackみたいなパスワードなしのメールだけログイン機能を実装してみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/832dbd6c1a0a012519fd\">qiita.com</a></cite>\n\n完全に使うあてもなく趣味で作った機能だったけど、 本体のSorceryにプルリク送ったらかなり歓迎されて、 あとはテストさえ書けば取り込んでもらえそうな状態です。  \n（じゃあ書けよっていう。。）\n\n[Add Magic Login submodule by athix · Pull Request #8 · Sorcery/sorcery · GitHub](https://github.com/Sorcery/sorcery/pull/8)\n\nしかし最近はFirebaseがマイブームなので、Firebase版のパスワードなしログインシステム「Magic Login」を実装してみました。\n\nFirebaseには匿名認証の仕組みもあるので、ユーザー登録なしでも使えて、本登録するときは「MagicLogin」という組み合わせにすると、かなりいい感じになりましたよと。環境\n--\n\n*   Firebase: 3.5.0\n*   Riot.js: 3.0.0\n*   SemanticUI: 2.2.4\n\nFirebase x Riot.jsのセットアップ\n-------------------------\n\nこの2つを使ったシステムのセットアップについては、  \nむかしQiitaに記事書きましたのでこちらを参考にしてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftomomichi%2Fitems%2F43da4d35007e69d0f484\" title=\"【Riot.js v3対応】Riot.js x Firebase で超お手軽にWebアプリを作ってみる - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://qiita.com/tomomichi/items/43da4d35007e69d0f484\">qiita.com</a></cite>\n\n以下この記事の内容をベースに追加修正していきます。\n\n実装方針\n----\n\n*   サイトに訪問したら自動で匿名ユーザーとしてログインさせる\n*   メアドを入力したら、そのアドレスにトークン付きのワンタイムログインリンクを送る\n*   リンクを踏んで来たらログインさせる\n*   匿名ユーザーで作成してたデータを本ユーザーアカウントに紐づける（今回は省略）\n\nこんな感じ。\n\n今回はユーザーが新規登録かログインかを意識せずに使えるように設計してみました。\n\nメアド入れたときに、既登録ならそのままログインリンクを送り、未登録なら新規登録した上でログインリンクを送る、という感じにしています。\n\n新規登録とログインの間違えってけっこう多いし、そんなんシステムで判断してくれよ、って個人的には思うのですよね。。\n\nログイン画面\n------\n\n### 完成イメージ\n\nこんな感じの見た目にしていきます。\n\n![f:id:o_tomomichi:20161228105538p:plain](https://storage.googleapis.com/blog-notsobad/images/20161228105538.png \"f:id:o_tomomichi:20161228105538p:plain\")\n\nSlackのメールだけログイン画面にあからさまに影響を受けた、メールと魔法の杖のアイコンがすてきです。\n\nなんとこれ、画像一切つかわずやってるってなかなかすごくないですか。  \nSemanticUIのアイコン合成機能です。Semanticすごい！\n\n### 実装\n\nauth.tagをこんな感じで実装。\n\n<auth>\n  <div class=\"ui padded basic segment\">\n    <br><br>\n    <div class=\"ui three column center aligned stackable grid\">\n      <div class=\"ui column\">\n        <div class=\"ui center aligned basic segment\">\n            <i class=\"icons\">\n              <i class=\"purple inverted mail circular huge icon\"></i>\n              <i class=\"horizontally flipped wizard huge icon\"></i>\n            </i>\n            <h1 class=\"ui header\">\n              Magic Login\n              <div class=\"sub header\">\n                Get a magic linked email for super easy sign-in;)\n              </div>\n            </h1>\n          <div class=\"ui action fluid input\">\n            <input type=\"text\" ref=\"email\" placeholder=\"Type your email here.\">\n            <button class=\"ui pink right labeled icon button\" onclick={ magicAuth }>\n              <i class=\"send icon\"></i>\n              Send\n            </button>\n          </div>\n          <div if={ message } class=\"ui visible left aligned basic segment { message.type } message\">{ message.text }</div>\n        </div>\n      </div>\n    </div>\n    <br><br>\n  </div>\n\n\n  <script>\n    var that = this\n\n    firebase.auth().onAuthStateChanged(function(user) {\n      that.user = user\n    })\n\n    magicAuth() {\n      that.errorMessage = ''\n      var newPassword = Math.random().toString(36).slice(-12)\n\n      firebase.auth().createUserWithEmailAndPassword(that.refs.email.value, newPassword).then(function(){\n        //新規ユーザーの場合\n        firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n        firebase.auth().signOut()\n        that.message = {\n          type: 'success',\n          text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n        }\n      }).catch(function(error) {\n        //アドレスが既に登録済みの場合\n        if(error.code == 'auth/email-already-in-use') {\n          firebase.auth().sendPasswordResetEmail(that.refs.email.value)\n          that.message = {\n            type: 'success',\n            text: 'ログイン用のメールを送信しました。メール内のリンクをクリックしてログインしてください。'\n          }\n        //validationエラーなど\n        }else {\n          that.message = {\n            type: 'error',\n            text: error.message\n          }\n        }\n      }).then(function(){\n        that.update()\n      })\n    }\n  </script>\n</auth>\n\nキモは`firebase.auth().sendPasswordResetEmail(that.refs.email.value)`の部分で、要するにパスワードリセットメールを送ってるのですね。\n\nこれを踏んだあとの処理を魔改造することで、マジックログインを超簡単に実装しています。  \n次はそっちを見てみましょう。\n\n### リンク踏んだあとの処理\n\nriot.jsのroutingで、ログインメールのリンク踏んだときの処理を受け付けています。\n\n    route('/auth..', function(){\n      var q = route.query()\n      if(q.mode == 'resetPassword') {\n        firebase.auth().verifyPasswordResetCode(q.oobCode).then(function(email) {\n          var newPassword = Math.random().toString(36).slice(-12)\n          firebase.auth().confirmPasswordReset(q.oobCode, newPassword).then(function(){\n            firebase.auth().signInWithEmailAndPassword(email, newPassword)\n            alert('ログインしました')\n          })\n        }).catch(function(error){\n          alert('ログインに失敗しました..')\n        })\n      }\n    })\n\n`auth?mode=resetPassword&oobCode=xxxxxx`という感じのURLを踏んでくるイメージです。  \n（パラメータはFirebaseが自動付与）\n\nやってることは、\n\n*   `verifyPasswordResetCode(q.oobCode)`でトークンの検証\n*   正しいトークンならランダムに生成した文字列を新パスワードに設定\n*   新パスワードでログイン\n\nというだけです。\n\nキモは新パスワードをユーザーが意識することはないし、システム側でも管理しないというところ。超セキュア！\n\n次ログインするときはまたリセットするだけですからね。\n\n### Firebaseの設定\n\nFirebase側では、ログインメール（＝パスワードリセットメール）のリンクURLを設定しておきます。\n\nConsoleで、\n\n> Authentication > メールテンプレート > パスワードの再設定\n\nから設定を編集し、「アクションURLをカスタマイズ」というメニューで好きなURLを設定しておきます。\n\n> `https://hogehoge.com/auth`\n\nこんな感じで設定しておけば、パラメータ部分はFirebaseが自動で付与してくれます。\n\nまとめ\n---\n\nというわけで、Firebaseの標準機能に乗っかることで超お手軽にMagicLoginが実装できました。\n\nこの記事では触れなかったけど、アクセス時に全員匿名ユーザーとして裏でログインさせておいて、 データを永続化したいときはこの仕組みで簡単ログイン、という組み合わせにするとかなりいい感じです。\n\nこのサービスで実践投入してますので、よければどんな感じか見てみてください。\n\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fthe-timeline.jp%2F\" title=\"簡単・便利な無料の年表作成サービス | THE TIMELINE(ザ・タイムライン)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://the-timeline.jp/\">the-timeline.jp</a></cite>\n\n年表たのしいでよ。","date":1482891904000,"tag":["つくったもの","技術系"]}},"__N_SSG":true}